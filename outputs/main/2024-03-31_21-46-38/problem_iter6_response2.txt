```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weight_current_distance = 0.4
    weight_average_distance_to_unvisited = 0.3
    weight_std_dev_distance_to_unvisited = 0.2
    weight_destination_distance = 0.1
    
    scores = {}
    
    all_distances = distance_matrix[current_node][list(unvisited_nodes)]
    
    average_distance_to_unvisited = np.mean(all_distances)
    std_dev_distance_to_unvisited = np.std(all_distances)
    
    for node in unvisited_nodes:
        
        score = (
            weight_current_distance * distance_matrix[current_node][node] 
            + weight_average_distance_to_unvisited * average_distance_to_unvisited 
            + weight_std_dev_distance_to_unvisited * std_dev_distance_to_unvisited 
            - weight_destination_distance * distance_matrix[destination_node][node]
        )
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
The improvements made in this code include:
1. Giving meaningful names to the weights for better readability.
2. Calculating all distances from the current node to unvisited nodes at once, instead of inside the loop.
3. Calculating the average and standard deviation of distances to unvisited nodes outside the loop.
4. Removing the redundant loop condition `if future_node != node` inside the lookahead score calculation.
5. Changing the subtraction of destination distance to likely inverse correlation, since a shorter distance to the destination node is likely better.
