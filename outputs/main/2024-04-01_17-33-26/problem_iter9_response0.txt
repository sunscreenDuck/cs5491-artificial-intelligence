```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the average distance for each node
    node_avg_distance = node_distances / (num_nodes - 1)
    
    # Calculate the sum of average distances for each node
    sum_node_avg_distance = np.sum(node_avg_distance)
    
    # Normalize the distance matrix by dividing with the sum of average distances
    normalized_distance_matrix = distance_matrix / sum_node_avg_distance
    
    # Initialize the penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over the distance matrix
    for i in range(num_nodes):
        for j in range(num_nodes):
            # Compute the penalty value for each edge
            penalty = normalized_distance_matrix[i, j] * (num_nodes - 1)
            
            # Set the penalty value in the penalty matrix
            penalty_matrix[i, j] = penalty
    
    return penalty_matrix
```

