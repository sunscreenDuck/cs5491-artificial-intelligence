```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        lookahead_scores = []
        for next_node in unvisited_nodes:
            future_distances = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
            future_average_distance_to_unvisited = np.mean(future_distances)
            lookahead_score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node] - c1 * distance_matrix[node][next_node] + c2 * future_average_distance_to_unvisited - c3 * std_dev_distance_to_unvisited
            lookahead_scores.append(lookahead_score)
        lookahead_score = sum(lookahead_scores) / len(lookahead_scores)
        score = (1 - threshold) * (c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]) + threshold * lookahead_score
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
