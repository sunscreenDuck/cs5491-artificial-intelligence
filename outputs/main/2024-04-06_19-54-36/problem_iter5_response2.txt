```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)

    # Calculate inverse distances
    inverse_distances = 1 / (normalized_matrix + np.finfo(float).eps)

    # Combine inverse distances and their transpose
    combined_factors = inverse_distances + inverse_distances.T

    # Sparsify the matrix by setting unpromising elements to zero
    sparsified_matrix = np.where(combined_factors > np.median(combined_factors), combined_factors, 0)

    return sparsified_matrix
```
In this improved version of the `heuristics_v2` function, we first normalize the distance matrix by dividing each element by the maximum distance value. This ensures that all distances are scaled between 0 and 1.

Next, we calculate the inverse distances by taking the reciprocal of the normalized distances. We add `np.finfo(float).eps` to avoid division by zero issues.

Then, we combine the inverse distances and their transpose by adding them together. This helps capture the overall trend of promising edges.

Finally, we sparsify the matrix by setting elements that are below the median of the combined factors to zero. This is done to remove unpromising edges and reduce computational complexity.

This mutated function takes into account the normalization of the distance matrix, utilizes inverse distances, combines factors symmetrically, and uses the median instead of the mean for sparsification.
