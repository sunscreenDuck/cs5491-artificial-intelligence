```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    alpha = 0.5
    beta = 0.5
    lookahead_depth = 3
    scores = {}

    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        score = alpha * distance_matrix[current_node][node] - beta * average_distance_to_unvisited + std_dev_distance_to_unvisited - \
                beta * distance_matrix[destination_node][node]

        min_lookahead_score = float('inf')

        for lookahead_node in unvisited_nodes:
            if lookahead_node != node:
                lookahead_score = score + alpha * distance_matrix[node][lookahead_node] - beta * (average_distance_to_unvisited -
                                                                                                 distance_matrix[node][lookahead_node])

                for _ in range(lookahead_depth - 1):
                    lookahead_score += alpha * distance_matrix[lookahead_node][select_next_node_v2(lookahead_node, destination_node, unvisited_nodes, distance_matrix)]

                if lookahead_score < min_lookahead_score:
                    min_lookahead_score = lookahead_score

        scores[node] = min_lookahead_score

    next_node = min(scores, key=scores.get)
    return next_node
```

