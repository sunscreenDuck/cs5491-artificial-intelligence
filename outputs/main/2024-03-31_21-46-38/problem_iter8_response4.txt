```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes.
    """
    weight_distance = 0.4
    weight_average_distance = 0.3
    weight_std_dev_distance = 0.2
    weight_future_impact = 0.1

    scores = {}
    distances_to_unvisited = distance_matrix[current_node][list(unvisited_nodes)]
    average_distance_to_unvisited = np.mean(distances_to_unvisited)
    std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
    
    future_impacts = np.mean(distance_matrix[destination_node][list(unvisited_nodes)], axis=1)
    
    for i, node in enumerate(unvisited_nodes):
        score = weight_distance * distance_matrix[current_node][node] - weight_average_distance * average_distance_to_unvisited + weight_std_dev_distance * std_dev_distance_to_unvisited - weight_future_impact * future_impacts[i]
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
