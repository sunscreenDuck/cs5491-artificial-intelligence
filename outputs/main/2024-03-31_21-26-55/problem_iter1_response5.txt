```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray, lookahead: int) -> int:
    """Select the next node to visit from the unvisited nodes using look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        lookahead_nodes = set(np.random.choice(list(unvisited_nodes - {node}), size=lookahead, replace=False))
        lookahead_scores = []
        for next_node in lookahead_nodes:
            lookahead_nodes.remove(next_node)
            all_distances = [distance_matrix[next_node][i] for i in lookahead_nodes if i != next_node]
            average_distance_to_unvisited = np.mean(all_distances)
            std_dev_distance_to_unvisited = np.std(all_distances)
            score = c1 * distance_matrix[current_node][next_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
            lookahead_scores.append(score)
            lookahead_nodes.add(next_node)
        scores[node] = np.mean(lookahead_scores)
        
    next_node = min(scores, key=scores.get)
    return next_node
```
In `select_next_node_v2`, I added a `lookahead` parameter which determines the number of nodes to look ahead. For each unvisited node, I randomly select a subset of nodes (excluding the current node) to perform the lookahead. I calculate the scores for each lookahead node and take the average as the score for the unvisited node. Finally, I select the unvisited node with the lowest score as the next node to visit.
