```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        # Look-ahead mechanism
        if score >= threshold:
            min_score = float('inf')
            best_next_node = None
            
            for next_node in unvisited_nodes:
                if next_node != node:
                    all_distances_next = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
                    avg_distance_next = np.mean(all_distances_next)
                    std_dev_distance_next = np.std(all_distances_next)
                    
                    lookahead_score = c1 * distance_matrix[current_node][node] - c2 * avg_distance_next + c3 * std_dev_distance_next - c4 * distance_matrix[destination_node][next_node]
                    
                    if lookahead_score < min_score:
                        min_score = lookahead_score
                        best_next_node = next_node
            if best_next_node is not None:
                scores[node] = min_score
        
    if scores:
        next_node = max(scores, key=scores.get)
    else:
        next_node = min(unvisited_nodes)
    
    return next_node
```
