```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Create a copy of the distance matrix
    heuristics = distance_matrix.copy()

    # Set the diagonal elements to infinity to prevent self-loops
    np.fill_diagonal(heuristics, np.inf)

    # Subtract each column minimum from each element
    min_col = np.min(heuristics, axis=0)
    heuristics -= min_col

    # Subtract each row minimum from each element
    min_row = np.min(heuristics, axis=1)
    heuristics -= min_row[:, np.newaxis]

    # Return the modified distance matrix
    return heuristics
```
This updated `heuristics_v2` function follows the reflection points by avoiding the use of average distance and subtracting column and row minimums from each element in the distance matrix. This will result in a modified distance matrix that reflects the cost of including each edge in the solution.
