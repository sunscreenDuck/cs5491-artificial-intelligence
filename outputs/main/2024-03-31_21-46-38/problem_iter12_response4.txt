```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes using improved heuristics.
    
    Args:
        current_node (int): The current node.
        destination_node (int): The destination node.
        unvisited_nodes (set): The set of unvisited nodes.
        distance_matrix (np.ndarray): The distance matrix.
    
    Returns:
        int: The next node to visit.
    """
    weights = np.array([0.4, 0.3, 0.2, 0.1])
    
    scores = {}
    for node in unvisited_nodes:
        distances = distance_matrix[node][list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances)
        std_dev_distance_to_unvisited = np.std(distances)
        
        score = np.dot(
            [distance_matrix[current_node][node], -average_distance_to_unvisited, std_dev_distance_to_unvisited, -distance_matrix[destination_node][node]],
            weights
        )
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
