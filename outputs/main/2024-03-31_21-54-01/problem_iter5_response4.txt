```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(distances)
        std_dev_distance_to_unvisited = np.std(distances)
        lookahead_distance = np.min([distance_matrix[node][i] for i in unvisited_nodes])
        score = c1 * distance_matrix[current_node][node] / distance_matrix[current_node][destination_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited + c4 * lookahead_distance
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
In the `select_next_node_v2` function, a few improvements have been made:

1. The calculation of `average_distance_to_unvisited` and `std_dev_distance_to_unvisited` is simplified by not considering the distances to already visited nodes. This optimization reduces unnecessary computations.

2. The score calculation is modified to include a weighted ratio between the distance to the current node and the distance to the destination node. This promotes selecting nodes closer to the destination.

3. A new scoring term `lookahead_distance` is introduced, which represents the distance from the current node to the nearest unvisited node. This promotes selecting nodes that are part of the shorter paths.

Please note that these improvements are suggestions based on the provided reflection. The actual effectiveness of the heuristics may vary depending on the specific problem instance.
