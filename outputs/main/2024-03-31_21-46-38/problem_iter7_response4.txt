```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    weights = [0.4, 0.3, 0.2, 0.1]
    scores = {}
    for node in unvisited_nodes:
        all_distances = distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = weights[0] * distance_matrix[current_node, node] - weights[1] * average_distance_to_unvisited + weights[2] * std_dev_distance_to_unvisited - weights[3] * distance_matrix[destination_node, node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
The code above reflects the improvements suggested in the prior reflection. It uses `numpy` arrays to optimize efficiency and minimize redundant computations. It also adjusts the weights and thresholds, while using more meaningful variable names and exploring alternative scoring methods.
