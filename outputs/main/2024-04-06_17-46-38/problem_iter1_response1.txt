Sure! Here's the improved version of the `heuristics_v1` function:

```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Calculate the inverse of the distance matrix
    inverse_matrix = np.divide(1, distance_matrix, out=np.zeros_like(distance_matrix), where=distance_matrix != 0)

    # Calculate the sum of inverses for each row
    row_sums = np.sum(inverse_matrix, axis=1)

    # Calculate the sum of inverses for each column
    column_sums = np.sum(inverse_matrix, axis=0)

    # Calculate combined factors for each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i][j] = (inverse_matrix[i][j] / row_sums[i]) + (inverse_matrix[i][j] / column_sums[j])

    return np.where(heuristics > np.median(heuristics), heuristics, 0)
```

In this improved version, I combined factors by calculating the sum of inverses for each row and each column. I then calculated the combined factors for each edge using these row and column sums. Finally, I sparsified the matrix by setting unpromising elements (below the median of the heuristics) to zero.

Please note that `np.ndarray` should be imported from the `numpy` library for this code to work properly.
