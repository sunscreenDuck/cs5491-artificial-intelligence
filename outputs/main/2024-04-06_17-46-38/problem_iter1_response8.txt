```python
import numpy as np

def heuristics_v2(distance_matrix):
    n = distance_matrix.shape[0]
    indicators = np.empty((n, n))
    
    # Compute factors for each edge
    factors = np.exp(-distance_matrix)
    combinations = np.power(np.outer(np.sum(factors, axis=1), np.ones(n)), -1)
    indicators = (factors * combinations).T
    
    # Sparsify matrix
    threshold = np.percentile(indicators, 10)  # Select top 10% promising edges
    indicators[indicators < threshold] = 0
    
    return indicators
```
Note: In the above code, I have used the exponential of the inverse distance as a factor and combined it with the sums across rows and columns to determine the overall promise of selecting an edge. Then, I have sparsified the matrix by setting elements below a certain threshold to zero. You can adjust the threshold value according to your requirements.
