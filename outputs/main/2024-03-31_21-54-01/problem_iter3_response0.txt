```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = distance_matrix[current_node][node] / average_distance_to_unvisited
        if std_dev_distance_to_unvisited > threshold:
            score -= distance_matrix[destination_node][node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
The `select_next_node_v2` function improves upon the previous `select_next_node_v1` function by simplifying the scoring function and removing unnecessary terms. It calculates the score of each unvisited node based on the ratio of the distance from the current node to that node over the average distance to unvisited nodes. If the standard deviation of the distances to unvisited nodes is greater than a threshold (0.7), the score is reduced by the distance from the destination node to that node. The node with the minimum score is then selected as the next node to visit.
