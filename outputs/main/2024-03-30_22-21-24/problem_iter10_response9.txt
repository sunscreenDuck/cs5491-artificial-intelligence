```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = {
        'distance_to_current': 0.35,
        'average_distance_to_unvisited': 0.25,
        'std_dev_distance_to_unvisited': 0.25,
        'distance_to_destination': 0.15
    }

    scores = {}
    distances_to_unvisited = distance_matrix[current_node, list(unvisited_nodes)]
    average_distances_to_unvisited = np.mean(distances_to_unvisited)
    std_dev_distances_to_unvisited = np.std(distances_to_unvisited)
    distances_to_destination = distance_matrix[destination_node, list(unvisited_nodes)]

    for node in unvisited_nodes:
        score = (
            weights['distance_to_current'] * distance_matrix[current_node, node]
            - weights['average_distance_to_unvisited'] * average_distances_to_unvisited
            + weights['std_dev_distance_to_unvisited'] * std_dev_distances_to_unvisited
            - weights['distance_to_destination'] * distances_to_destination[node]
        )
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
