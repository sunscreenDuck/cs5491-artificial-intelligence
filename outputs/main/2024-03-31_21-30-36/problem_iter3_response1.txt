```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    lookahead_nodes = {current_node}  # Initialize lookahead nodes with the current node
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in lookahead_nodes]  # Lookahead distances
        mean_distance_to_lookahead = np.mean(all_distances)
        std_dev_distance_to_lookahead = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * mean_distance_to_lookahead + c3 * std_dev_distance_to_lookahead - c4 * distance_matrix[destination_node][node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
In the `select_next_node_v2` function, I have introduced a lookahead mechanism to improve the decision-making process. We initialize the lookahead set with the current node and consider only the distances between the current node and the lookahead nodes. This allows the algorithm to prioritize nodes that are closer to the current path but haven't been visited yet. The mean and standard deviation of distances to lookahead nodes are calculated and incorporated into the score calculation. The weights `c1`, `c2`, `c3`, and `c4` control the influence of each parameter.
