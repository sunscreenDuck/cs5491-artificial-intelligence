```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Factor 1: Inverse of distance
    heuristics += 1 / distance_matrix

    # Factor 2: Inverse of degree
    degrees = np.count_nonzero(distance_matrix, axis=1)
    degrees[degrees == 0] = 1  # Avoid division by zero
    heuristics += 1 / degrees[:, np.newaxis]

    # Factor 3: Promising connections
    connected = np.sum(distance_matrix > 0, axis=0)
    promising_connections = connected / (n - 1)
    heuristics += promising_connections[np.newaxis, :] * 2

    # Sparsify the matrix
    threshold = np.percentile(heuristics, 90)
    heuristics[heuristics <= threshold] = 0

    return heuristics
```
The `heuristics_v2` function improves upon `heuristics_v1` by considering three factors to determine how promising it is to select an edge:

- Factor 1: Inverse of distance - edges with shorter distances are considered more promising.
- Factor 2: Inverse of degree - nodes with fewer connections are considered more promising.
- Factor 3: Promising connections - edges connected to more nodes are considered more promising.

The heuristics are then combined and a sparsity threshold is used to set unpromising elements to zero.
