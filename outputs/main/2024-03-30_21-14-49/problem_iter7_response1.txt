```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    weights = {'distance_to_current': 0.4, 'average_distance_to_unvisited': 0.3, 'std_dev_distance_to_unvisited': 0.2, 'distance_to_destination': 0.1}
    
    scores = {}
    for node in unvisited_nodes:
        distances_to_unvisited = distance_matrix[node][list(unvisited_nodes)].tolist()
        distances_to_unvisited.remove(distance_matrix[node][node])
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        
        score = weights['distance_to_current'] * distance_matrix[current_node][node] \
                - weights['average_distance_to_unvisited'] * average_distance_to_unvisited \
                + weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited \
                - weights['distance_to_destination'] * distance_matrix[destination_node][node]
                
        if std_dev_distance_to_unvisited <= threshold:
            score *= -1
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```

