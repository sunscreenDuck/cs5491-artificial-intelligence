```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes (mutated version)."""
    
    threshold = 0.7
    weights = np.array([0.4, 0.3, 0.2, 0.1])
    scores = {}
    
    for node in unvisited_nodes:
        distances = distance_matrix[node][list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances)
        std_dev_distance_to_unvisited = np.std(distances)
        
        scores[node] = np.dot(weights, [distance_matrix[current_node][node], -average_distance_to_unvisited, std_dev_distance_to_unvisited, -distance_matrix[destination_node][node]])
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In the mutated `select_next_node_v2` function:
1. We use the numpy array `weights` instead of individual variables for the coefficients `c1`, `c2`, `c3`, `c4`.
2. Instead of calculating distances in a loop, we directly extract distances from the `distance_matrix` using slicing.
3. We update the `scores` dictionary using numpy dot product for efficient calculations.
4. The set difference operation `unvisited_nodes - {node}` is used to exclude the current node from the distances calculation.

Note: Make sure to import the `numpy` package before using this function.
