```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        look_ahead_score = 0
        if len(unvisited_nodes) > 1:
            look_ahead_score = look_ahead_score_fn(current_node, node, set(unvisited_nodes - {node}), distance_matrix)
        
        final_score = score * threshold + look_ahead_score * (1 - threshold)
        scores[node] = final_score
    
    next_node = min(scores, key=scores.get)
    return next_node

def look_ahead_score_fn(current_node: int, next_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> float:
    """Calculate a look-ahead score for the next node."""
    threshold = 0.6
    c1, c2, c3 = 0.5, 0.3, 0.2
    scores = []
    
    for node in unvisited_nodes:
        remaining_nodes = set(unvisited_nodes - {node})
        next_node_distances = []
        
        for remaining_node in remaining_nodes:
            next_node_distances.append(distance_matrix[next_node][remaining_node])
        
        avg_next_node_distances = np.mean(next_node_distances)
        
        score = c1 * distance_matrix[current_node][next_node] - c2 * distance_matrix[next_node][node] - c3 * avg_next_node_distances
        scores.append(score)
    
    look_ahead_score = max(scores)
    final_score = look_ahead_score * threshold + max(scores) * (1 - threshold)
    
    return final_score
```

