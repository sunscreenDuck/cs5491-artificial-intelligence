```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes using an improved heuristic."""
    threshold = 0.7

    # Normalize distance matrix to improve computation
    normalized_distance_matrix = distance_matrix / np.max(distance_matrix)

    # Calculate weighted scores for each unvisited node
    scores = {}
    for node in unvisited_nodes:
        # Calculate average and standard deviation of distances to other unvisited nodes
        all_distances = normalized_distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate score based on weighted factors
        score = 0.4 * normalized_distance_matrix[current_node][node] \
                - 0.3 * average_distance_to_unvisited \
                + 0.2 * std_dev_distance_to_unvisited \
                - 0.1 * normalized_distance_matrix[destination_node][node]
        
        # Apply look-ahead mechanism to encourage exploration
        lookahead_score = score * (1 + threshold * len(unvisited_nodes))
        scores[node] = lookahead_score

    # Select node with the highest score as the next node to visit
    next_node = max(scores, key=scores.get)
    return next_node
```

