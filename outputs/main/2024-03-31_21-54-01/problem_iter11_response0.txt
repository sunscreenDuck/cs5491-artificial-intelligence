```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    distances_to_unvisited = distance_matrix[current_node][list(unvisited_nodes)]
    average_distance_to_unvisited = np.mean(distances_to_unvisited)
    std_dev_distance_to_unvisited = np.std(distances_to_unvisited)

    scores = c1 * distances_to_unvisited - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][list(unvisited_nodes)]

    next_node = list(unvisited_nodes)[np.argmin(scores)]
    return next_node
```
In this improved version, I made the following refinements:

1. Removed the threshold variable as its purpose was not clear in the original code.
2. Simplified the calculation of `distances_to_unvisited` by directly extracting the distances from the distance_matrix.
3. Calculated `average_distance_to_unvisited` and `std_dev_distance_to_unvisited` using numpy functions for better performance.
4. Combined the scoring formula into a single array operation by utilizing numpy operations.
5. Used `np.argmin` to find the index of the minimum score and converted it to the corresponding node.

Note: Make sure to import numpy (`import numpy as np`) at the beginning of your code if it's not already imported.
