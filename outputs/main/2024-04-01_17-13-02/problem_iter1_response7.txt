```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance
    average_distance = np.mean(distance_matrix)

    # Calculate the maximum distance
    max_distance = np.max(distance_matrix)

    # Initialize the heuristics matrix
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Iterate over the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Calculate the heuristics value
            heuristics_value = (max_distance - distance_matrix[i, j]) / average_distance

            # Set the heuristics value in the matrix
            heuristics_matrix[i, j] = heuristics_value

    return heuristics_matrix
```

In `heuristics_v2`, I have improved the heuristics calculation by scaling the heuristics value based on the average distance and the maximum distance in the distance matrix. This ensures that longer edges are considered worse and assigned higher heuristics values.
