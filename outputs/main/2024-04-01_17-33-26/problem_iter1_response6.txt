```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)

    # Calculate the average distance for each node
    node_avg_distance = node_distances / (distance_matrix.shape[0] - 1)

    # Calculate the prior indicators for each edge
    edge_indicators = distance_matrix / node_avg_distance[:, np.newaxis]

    return edge_indicators
```
In `heuristics_v2`, I have improved upon `heuristics_v1` by calculating the average distance for each node. The prior indicators for each edge are then calculated by dividing the corresponding distance in the distance matrix by the average distance of the node from which the edge originates. This approach takes into account the average distance of the node when evaluating the edges, which can help identify edges that are particularly long in comparison to the average distance of the originating node.
