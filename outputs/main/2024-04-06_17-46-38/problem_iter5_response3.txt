```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Calculate the average distance
    average_distance = np.mean(distance_matrix)

    # Calculate the maximum distance
    max_distance = np.max(distance_matrix)

    # Calculate the standard deviation of the distance
    distance_std = np.std(distance_matrix)

    # Calculate the average pairwise difference between distances
    pairwise_diff = np.mean(np.abs(np.diff(distance_matrix)))

    # Calculate the average distance to closest neighbors
    min_distances = np.min(distance_matrix, axis=1)
    avg_min_distance = np.mean(min_distances)

    # Calculate the ratio of average distance to maximum distance
    max_ratio = average_distance / max_distance

    # Calculate the ratio of average pairwise difference to standard deviation
    std_ratio = pairwise_diff / distance_std

    heuristics = (1 / distance_matrix) + \
                 (average_distance / (distance_matrix ** 2)) + \
                 (distance_matrix / max_distance) + \
                 ((avg_min_distance - distance_matrix) / avg_min_distance) + \
                 ((distance_matrix - min_distances[:, np.newaxis]) / pairwise_diff) + \
                 max_ratio + std_ratio

    # Set unpromising elements to zero
    heuristics[heuristics < 0.25] = 0

    return heuristics
```
The `heuristics_v2` function is a mutated version that incorporates several improvements based on the reflection. It calculates additional ratios and uses vectorized operations to improve efficiency. It also sets unpromising elements directly to zero without using a loop for better performance.
