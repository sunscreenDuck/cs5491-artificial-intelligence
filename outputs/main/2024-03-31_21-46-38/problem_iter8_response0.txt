```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    weights = [0.4, 0.3, 0.2, 0.1]
    scores = {}
    all_distances = distance_matrix[current_node, list(unvisited_nodes)]
    average_distance_to_unvisited = np.mean(all_distances)
    std_dev_distance_to_unvisited = np.std(all_distances)
    
    for node in unvisited_nodes:
        score = (
            weights[0] * distance_matrix[current_node, node]
            - weights[1] * average_distance_to_unvisited
            + weights[2] * std_dev_distance_to_unvisited
            - weights[3] * distance_matrix[destination_node, node]
        )
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
[Explanation]
The improved code modifies the previous code in the following ways:

1. Move the calculation of `all_distances`, `average_distance_to_unvisited`, and `std_dev_distance_to_unvisited` outside the loop since these values are the same for all nodes.
2. Use more descriptive variable names for better understanding.
3. Adjust the code for the subtraction of `average_distance_to_unvisited` and addition of `std_dev_distance_to_unvisited` according to the provided weights.
4. Enclose the code in a Python code block.
