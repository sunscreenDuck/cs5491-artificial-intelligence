```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes using improved heuristics."""
    weights = {'distance_to_current': 0.4, 'average_distance_to_unvisited': 0.3, 'std_dev_distance_to_unvisited': 0.2, 'distance_to_destination': 0.1}
    
    distances_to_unvisited = distance_matrix[list(unvisited_nodes), list(unvisited_nodes)]
    average_distance_to_unvisited = np.mean(distances_to_unvisited, axis=1)
    std_dev_distance_to_unvisited = np.std(distances_to_unvisited, axis=1)
    
    distance_to_current = distance_matrix[current_node][list(unvisited_nodes)]
    distance_to_destination = distance_matrix[destination_node][list(unvisited_nodes)]
    
    scores = weights['distance_to_current'] * distance_to_current \
            - weights['average_distance_to_unvisited'] * average_distance_to_unvisited \
            + weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited \
            - weights['distance_to_destination'] * distance_to_destination
    
    next_node = np.argmin(scores)
    return list(unvisited_nodes)[next_node]
```
[Explanation]
1. The function `select_next_node_v2` is an improved version of the `select_next_node_v1` function.
2. It calculates the distances to unvisited nodes using vectorized operations to improve performance.
3. The distances to unvisited nodes are calculated as a matrix of shape (num_unvisited_nodes, num_unvisited_nodes).
4. The average and standard deviation of distances to unvisited nodes are computed along the rows using the `np.mean()` and `np.std()` functions with `axis=1`.
5. Distance to the current node is calculated for each unvisited node.
6. Distance to the destination node is calculated for each unvisited node.
7. The scores for each unvisited node are calculated as a combination of the different factors with their corresponding weightings.
8. The next node to visit is determined as the node with the minimum score using `np.argmin()`.
9. Finally, the next node is converted to its original node index using `list(unvisited_nodes)[next_node]`.
