```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes using an improved look-ahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.05
    scores = {}

    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        lookahead_scores = []
        for next_node in unvisited_nodes:
            if next_node != node:
                next_distances = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
                average_distance_to_next_unvisited = np.mean(next_distances)
                lookahead_score = c5 * distance_matrix[node][next_node] - c2 * average_distance_to_next_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
                lookahead_scores.append(lookahead_score)

        lookahead_avg_score = np.mean(lookahead_scores) if lookahead_scores else 0
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_avg_score
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
