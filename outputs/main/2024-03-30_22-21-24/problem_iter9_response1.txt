```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4 = 0.35, 0.25, 0.25, 0.15
    
    unvisited_nodes = list(unvisited_nodes)
    distances_to_unvisited = distance_matrix[unvisited_nodes, :]
    average_distance_to_unvisited = np.mean(distances_to_unvisited, axis=1)
    std_dev_distance_to_unvisited = np.std(distances_to_unvisited, axis=1)
    
    scores = c1 * distance_matrix[current_node, unvisited_nodes] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node, unvisited_nodes]
    
    next_node = unvisited_nodes[np.argmin(scores)]
    return next_node
```
In this optimized version, we simplify the code by removing unnecessary calculations and using efficient numpy operations. Instead of looping over the unvisited nodes, we convert it into a list and use array slicing to access the relevant rows of the distance matrix. We also calculate the average and standard deviation of distances to unvisited nodes along the rows using numpy `mean` and `std` functions with `axis=1` argument. Finally, we use numpy `argmin` to find the index of the minimum score and retrieve the corresponding next node from the list of unvisited nodes.
