```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.45, 0.25, 0.2, 0.1
    lookahead_c1, lookahead_c2, lookahead_c3 = 0.4, 0.3, 0.3
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        
        # Calculate the average and standard deviation of distances to unvisited nodes
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate the score using the improved look-ahead mechanism
        lookahead_score = 0
        for next_node in unvisited_nodes:
            if next_node != node:
                # Calculate the score for each possible next node using the lookahead mechanism
                lookahead_distance = distance_matrix[node][next_node]
                lookahead_average_distance = (average_distance_to_unvisited * (len(unvisited_nodes) - 1) + lookahead_distance) / len(unvisited_nodes)
                lookahead_std_dev_distance = np.sqrt(((std_dev_distance_to_unvisited ** 2) * (len(unvisited_nodes) - 1) + (lookahead_distance - lookahead_average_distance) ** 2) / len(unvisited_nodes))
                lookahead_score += lookahead_c1 * lookahead_distance - lookahead_c2 * lookahead_average_distance + lookahead_c3 * lookahead_std_dev_distance
        
        # Calculate the final score by adding the lookahead score to the base score
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_score
        scores[node] = score
    
    # Select the next node with the highest score
    next_node = max(scores, key=scores.get)
    
    return next_node
```
