```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Normalize the distance matrix
    normalized_distance_matrix = distance_matrix / np.max(distance_matrix)

    # Calculate the average distance
    average_distance = np.mean(normalized_distance_matrix)

    # Calculate the standard deviation of the distance
    distance_std = np.std(normalized_distance_matrix)

    # Calculate the average pairwise difference between distances
    pairwise_diff = np.mean(np.abs(np.diff(normalized_distance_matrix)))

    # Calculate the average distance to closest neighbors
    min_distances = np.min(normalized_distance_matrix, axis=1)
    avg_min_distance = np.mean(min_distances)

    # Calculate the ratio of average distance to maximum distance
    max_ratio = average_distance / np.max(normalized_distance_matrix)

    # Calculate the ratio of average pairwise difference to standard deviation
    std_ratio = pairwise_diff / distance_std

    heuristics = (1 / normalized_distance_matrix) + \
                 (average_distance / (normalized_distance_matrix ** 2)) + \
                 (normalized_distance_matrix) + \
                 ((avg_min_distance - normalized_distance_matrix) / avg_min_distance) + \
                 ((normalized_distance_matrix - min_distances[:, np.newaxis]) / pairwise_diff) + \
                 max_ratio + std_ratio

    # Set unpromising elements to zero
    heuristics[heuristics < 0.25] = 0

    return heuristics
```
