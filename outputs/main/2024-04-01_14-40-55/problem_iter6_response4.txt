```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    threshold = 0.6
    c1, c2, c3, c4, c5 = 0.3, 0.3, 0.1, 0.05, 0.25
    scores = {}
    
    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        
        all_distances = distance_matrix[node][unvisited_node_list]
        unvisited_distances = np.concatenate([all_distances, [distance_matrix[node][current_node], distance_matrix[node][destination_node]]])
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)
        
        lookahead_distances = distance_matrix[destination_node][unvisited_node_list]
        lookahead_average_distance = np.mean(lookahead_distances)
        lookahead_std_dev_distance = np.std(lookahead_distances)
        
        look_ahead_scores = []
        for next_node in unvisited_node_list:
            next_all_distances = distance_matrix[next_node][unvisited_node_list]
            next_unvisited_distances = np.concatenate([next_all_distances, [distance_matrix[next_node][current_node], distance_matrix[next_node][destination_node]]])
            next_average_distance_to_unvisited = np.mean(next_unvisited_distances)
            next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances)
            
            next_lookahead_distances = distance_matrix[destination_node][unvisited_node_list - {next_node}]
            next_lookahead_average_distance = np.mean(next_lookahead_distances)
            next_lookahead_std_dev_distance = np.std(next_lookahead_distances)
            
            next_score = c1 * distance_matrix[current_node][next_node] - c2 * next_average_distance_to_unvisited + c3 * next_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node] - c5 * (lookahead_average_distance - next_lookahead_average_distance)
            look_ahead_scores.append(next_score)
        
        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * (lookahead_score - lookahead_average_distance + lookahead_std_dev_distance - lookahead_average_distance * lookahead_std_dev_distance / np.sqrt(len(unvisited_node_list)))
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
