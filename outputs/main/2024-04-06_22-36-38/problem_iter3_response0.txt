```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    ### Prior reflection:
    ### 1. Combine multiple factors for a more comprehensive evaluation and explore alternative normalization methods.
    ### 2. Use dynamic thresholds for sparsification based on problem-specific characteristics and consider normalizing the distance matrix before calculating the inverse.
    ### 3. Experiment with different normalization techniques and thresholding strategies to improve performance.
    
    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)
    
    # Calculate the inverse of the normalized matrix
    inverse_matrix = 1 / normalized_matrix
    
    # Calculate the mean and standard deviation of the inverse matrix
    mean = np.mean(inverse_matrix)
    std_dev = np.std(inverse_matrix)
    
    # Calculate the normalized inverse matrix by subtracting the mean and dividing by the standard deviation
    normalized_inverse_matrix = (inverse_matrix - mean) / std_dev
    
    # Apply sparsification by setting unpromising elements to zero
    threshold = np.mean(normalized_inverse_matrix) - np.std(normalized_inverse_matrix)
    sparsified_matrix = normalized_inverse_matrix.copy()
    sparsified_matrix[sparsified_matrix < threshold] = 0
    
    return sparsified_matrix
```
