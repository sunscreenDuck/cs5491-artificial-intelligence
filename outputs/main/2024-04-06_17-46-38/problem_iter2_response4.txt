```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate the combined factors
    promising_factors = []
    for i in range(n):
        for j in range(n):
            if i != j:
                combined_factor = 1 / distance_matrix[i, j] + np.log(distance_matrix[i, j] + 1)
                promising_factors.append(combined_factor)

    # Calculate the threshold for sparsifying the matrix
    threshold = np.percentile(promising_factors, 25)

    # Update the heuristics matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                combined_factor = 1 / distance_matrix[i, j] + np.log(distance_matrix[i, j] + 1)
                if combined_factor >= threshold:
                    heuristics_matrix[i, j] = combined_factor

    return heuristics_matrix
```
```
