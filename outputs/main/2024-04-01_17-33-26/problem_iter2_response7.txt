```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]

    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)

    # Calculate the average distance for each node
    node_avg_distance = node_distances / (num_nodes - 1)

    # Calculate the prior indicators for each edge
    edge_indicators = distance_matrix / node_avg_distance[:, np.newaxis]

    # Initialize the node penalties with zeros
    node_penalties = np.zeros(num_nodes)

    # Iterate over each node
    for i in range(num_nodes):
        # Calculate the penalty for each node based on neighbors
        neighbors = [j for j in range(num_nodes) if j != i]
        node_penalties[i] = np.mean(edge_indicators[i, neighbors])

    # Calculate the penalties for each edge based on node penalties
    edge_penalties = np.tile(node_penalties, (num_nodes, 1))

    return edge_penalties
```
