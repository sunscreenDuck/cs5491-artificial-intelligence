```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Calculate the average and standard deviation of the distances
    average_distance = np.mean(distance_matrix[np.nonzero(distance_matrix)])
    std_distance = np.std(distance_matrix[np.nonzero(distance_matrix)])

    # Calculate the maximum and minimum distances
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)

    for i in range(n):
        for j in range(n):
            # Calculate the heuristics value as a combination of factors
            factor1 = 1 / distance_matrix[i, j] + average_distance / distance_matrix[i, j]**2
            factor2 = np.exp(-distance_matrix[i, j] / std_distance)
            factor3 = (distance_matrix[i, j] - min_distance) / (max_distance - min_distance)
            
            # Calculate the final heuristic value
            heuristic_value = factor1 * factor2 * factor3
            
            # Set unpromising elements to zero
            if heuristic_value < 0.5:
                heuristic_value = 0
            
            heuristics[i, j] = heuristic_value
    
    return heuristics
```
