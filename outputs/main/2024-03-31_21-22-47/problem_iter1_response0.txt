```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with look-ahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        all_distances = [distance_matrix[node][i] for i in remaining_nodes]
        
        # Calculate average and standard deviation of distances to remaining nodes
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate the score
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        # Calculate the look-ahead score
        look_ahead_score = 0
        if remaining_nodes:
            for next_node in remaining_nodes:
                remaining_nodes_2 = remaining_nodes - {next_node}
                all_distances_2 = [distance_matrix[next_node][i] for i in remaining_nodes_2]
                
                # Calculate average and standard deviation of distances to remaining nodes in the next step
                average_distance_to_unvisited_2 = np.mean(all_distances_2)
                std_dev_distance_to_unvisited_2 = np.std(all_distances_2)
                
                # Calculate the look-ahead score
                look_ahead_score += c1 * distance_matrix[node][next_node] - c2 * average_distance_to_unvisited_2 + c3 * std_dev_distance_to_unvisited_2 - c4 * distance_matrix[destination_node][next_node]
                
            # Average the look-ahead scores over the number of remaining nodes
            look_ahead_score /= len(remaining_nodes)
            
            # Combine the score with the look-ahead score
            score += threshold * look_ahead_score
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In `select_next_node_v2`, I added a look-ahead mechanism to the original `select_next_node_v1` to take into account the potential future impact of selecting each unvisited node. The look-ahead score is calculated by considering the scores of the next step for each remaining node, and then averaged over the number of remaining nodes.
