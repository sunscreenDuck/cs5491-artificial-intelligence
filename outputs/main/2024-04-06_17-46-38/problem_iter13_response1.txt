```python
import numpy as np


def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)

    # Calculate the average distance
    average_distance = np.mean(normalized_matrix)

    # Calculate the standard deviation of the distance
    distance_std = np.std(normalized_matrix)

    # Calculate the average pairwise difference between distances
    pairwise_diff = np.mean(np.abs(np.diff(normalized_matrix[np.nonzero(normalized_matrix)])))

    # Calculate the average distance to closest neighbors
    min_distances = np.min(normalized_matrix, axis=1)
    avg_min_distance = np.mean(min_distances)

    for i in range(n):
        for j in range(n):
            # Calculate the heuristics value as a combination of factors
            heuristic_value = (1 / normalized_matrix[i, j]) + \
                              (average_distance / (normalized_matrix[i, j] ** 2)) + \
                              (normalized_matrix[i, j] / (distance_std + 1e-5)) + \
                              ((avg_min_distance - normalized_matrix[i, j]) / avg_min_distance) + \
                              ((normalized_matrix[i, j] - min_distances[i]) / (pairwise_diff + 1e-5))

            # Set unpromising elements to zero
            if heuristic_value < 0.25:
                heuristic_value = 0

            heuristics[i, j] = heuristic_value

    return heuristics
```
The mutated function `heuristics_v2` incorporates the following improvements:
- The division by `max_distance` has been replaced by a division by `(distance_std + 1e-5)`. This helps balance the influence of extreme distances and avoids dividing by zero.
- The division by `pairwise_diff` has also been replaced by a division by `(pairwise_diff + 1e-5)`. This prevents division by zero in case all distances are equal, and the pairwise difference is zero.
- Normalization of the distance matrix is calculated only once with `average_distance` calculated over the entire matrix instead of only non-zero elements.
