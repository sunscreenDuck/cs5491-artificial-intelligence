```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the reciprocal of the distance matrix
    reciprocal_matrix = np.reciprocal(distance_matrix)
    
    # Calculate the sum of the reciprocal matrix
    sum_matrix = np.sum(reciprocal_matrix)
    
    # Calculate the average reciprocal value
    average_value = sum_matrix / (distance_matrix.shape[0] * distance_matrix.shape[1])
    
    # Calculate the maximum reciprocal value
    max_value = np.max(reciprocal_matrix)
    
    # Calculate the minimum reciprocal value
    min_value = np.min(reciprocal_matrix)
    
    # Calculate the range of reciprocal values
    range_value = max_value - min_value
    
    # Calculate the standard deviation of the reciprocal matrix
    std_value = np.std(reciprocal_matrix)
    
    # Calculate the normalized reciprocal matrix
    normalized_matrix = (reciprocal_matrix - min_value) / range_value
    
    # Sparsify the matrix by setting unpromising elements to zero
    threshold = average_value + 2 * std_value
    sparsified_matrix = np.where(normalized_matrix >= threshold, normalized_matrix, 0)
    
    return sparsified_matrix
```
