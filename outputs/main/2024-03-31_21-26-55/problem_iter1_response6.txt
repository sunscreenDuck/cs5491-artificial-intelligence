```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with look-ahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - (c2 * average_distance_to_unvisited * threshold) + (c3 * std_dev_distance_to_unvisited * threshold) - c4 * distance_matrix[destination_node][node]
        
        # Look-ahead mechanism
        look_ahead_scores = []
        for future_node in unvisited_nodes:
            future_distances = [distance_matrix[future_node][i] for i in unvisited_nodes if i != future_node]
            future_average_distance_to_unvisited = np.mean(future_distances)
            future_std_dev_distance_to_unvisited = np.std(future_distances)
            future_score = c1 * distance_matrix[node][future_node] - (c2 * future_average_distance_to_unvisited * threshold) + (c3 * future_std_dev_distance_to_unvisited * threshold) - c4 * distance_matrix[destination_node][future_node]
            look_ahead_scores.append(future_score)
        look_ahead_score = np.mean(look_ahead_scores)
        
        # Combine current score with look-ahead score
        score = score + look_ahead_score
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
