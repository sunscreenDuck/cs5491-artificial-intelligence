```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Normalize the distance matrix
    normalized_matrix = (distance_matrix - np.mean(distance_matrix)) / np.std(distance_matrix)

    # Calculate the average distance
    average_distance = np.mean(normalized_matrix[np.nonzero(normalized_matrix)])

    # Calculate the maximum distance
    max_distance = np.max(normalized_matrix)

    # Calculate the average pairwise difference between distances
    non_zero_distances = normalized_matrix[np.nonzero(normalized_matrix)]
    pairwise_diff = np.mean(np.abs(np.diff(non_zero_distances)))

    # Calculate the average distance to closest neighbors
    min_distances = np.min(normalized_matrix, axis=1)
    avg_min_distance = np.mean(min_distances)

    # Calculate the heuristics values as a combination of factors
    heuristics = (1 / normalized_matrix) + \
                 (average_distance / (normalized_matrix ** 2)) + \
                 (normalized_matrix / max_distance) + \
                 ((avg_min_distance - normalized_matrix) / avg_min_distance) + \
                 ((normalized_matrix - min_distances[:, np.newaxis]) / pairwise_diff)

    # Set unpromising elements to zero
    heuristics[heuristics < 0.25] = 0

    return heuristics
```
