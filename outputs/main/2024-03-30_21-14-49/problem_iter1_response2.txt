```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    num_unvisited = len(unvisited_nodes)
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        lookahead_score = 0
        if num_unvisited > 1:
            lookahead_node_scores = []
            for lookahead_node in unvisited_nodes - {node}:
                lookahead_distances = [distance_matrix[lookahead_node][i] for i in unvisited_nodes - {node, lookahead_node}]
                lookahead_average_distance_to_unvisited = np.mean(lookahead_distances)
                lookahead_std_dev_distance_to_unvisited = np.std(lookahead_distances)
                lookahead_node_score = c1 * distance_matrix[node][lookahead_node] - c2 * lookahead_average_distance_to_unvisited + c3 * lookahead_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][lookahead_node]
                lookahead_node_scores.append(lookahead_node_score)
            lookahead_score = min(lookahead_node_scores)
        score = (c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]) * threshold + lookahead_score * (1 - threshold)
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
