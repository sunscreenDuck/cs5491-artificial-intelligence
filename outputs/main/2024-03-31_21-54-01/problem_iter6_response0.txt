```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:

    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.5
    scores = {}
    
    max_distance = np.amax(distance_matrix)
    normalized_distance_matrix = distance_matrix / max_distance
    
    for node in unvisited_nodes:
        distances = normalized_distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances)
        std_dev_distance_to_unvisited = np.std(distances)
        
        normalized_current_to_node_distance = normalized_distance_matrix[current_node][node]
        normalized_destination_to_node_distance = normalized_distance_matrix[destination_node][node]
        
        score = c1 * normalized_current_to_node_distance - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * normalized_destination_to_node_distance - c5 * len(unvisited_nodes)
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
