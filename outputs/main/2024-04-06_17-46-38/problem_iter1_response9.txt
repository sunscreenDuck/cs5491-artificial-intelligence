```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the inverse of the distance matrix
    inv_distance_matrix = 1 / distance_matrix
    
    # Normalize the inverse distance matrix
    inv_distance_matrix /= np.max(inv_distance_matrix)
    
    # Calculate the logarithm of the normalized inverse distance matrix
    log_inv_distance_matrix = np.log(inv_distance_matrix)
    
    # Apply sparsification by setting unpromising elements to zero
    threshold = np.mean(log_inv_distance_matrix) - np.std(log_inv_distance_matrix)
    heuristics_matrix = np.zeros_like(distance_matrix)
    heuristics_matrix[log_inv_distance_matrix > threshold] = log_inv_distance_matrix[log_inv_distance_matrix > threshold]
    
    return heuristics_matrix
```

