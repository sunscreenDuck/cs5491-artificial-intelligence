```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    indicators = np.zeros((num_nodes, num_nodes))

    max_dist = np.max(distance_matrix)
    min_dist = np.min(distance_matrix)

    for i in range(num_nodes):
        for j in range(i+1, num_nodes):
            # Calculate the normalized distance
            norm_dist = (distance_matrix[i, j] - min_dist) / (max_dist - min_dist)

            # Set the indicator based on the normalized distance
            indicators[i, j] = norm_dist
            indicators[j, i] = norm_dist

    return indicators
```
In `heuristics_v2`, we calculate the normalized distance for each edge based on the minimum and maximum distances in the distance matrix. The normalized distance gives a better indication of how bad it is to include each edge in a solution.
