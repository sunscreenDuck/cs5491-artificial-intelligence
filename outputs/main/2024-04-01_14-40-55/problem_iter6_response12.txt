```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved scoring formula."""
    c1, c2, c3, c4, c5 = 0.35, 0.2, 0.2, 0.15, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        
        # Remove the node from the set of unvisited nodes
        updated_unvisited_nodes = unvisited_nodes - {node}
        
        all_distances = distance_matrix[node][list(updated_unvisited_nodes)]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        next_all_distances = distance_matrix[list(updated_unvisited_nodes)][:, list(updated_unvisited_nodes)].mean(axis=1)
        next_average_distance_to_unvisited = np.mean(next_all_distances)
        next_std_dev_distance_to_unvisited = np.std(next_all_distances)
        
        # Add the node back to the set of unvisited nodes
        updated_unvisited_nodes.add(node)
        
        look_ahead_distance = c5 * distance_matrix[node][destination_node]
        
        score = c1 * distance_to_node - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * next_average_distance_to_unvisited + c5 * next_std_dev_distance_to_unvisited - c6 * look_ahead_distance
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
