```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with look-ahead mechanism and better performance."""

    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1

    scores = {}

    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = sum(all_distances) / len(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        next_node_scores = []
        for next_node in unvisited_nodes:
            if next_node != node:
                next_all_distances = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
                next_average_distance_to_unvisited = sum(next_all_distances) / len(next_all_distances)
                next_std_dev_distance_to_unvisited = np.std(next_all_distances)

                next_score = c1 * distance_matrix[current_node][next_node] - c2 * next_average_distance_to_unvisited + c3 * next_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
                next_node_scores.append(next_score)

        look_ahead_score = threshold * sum(next_node_scores) / len(next_node_scores)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + look_ahead_score
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
