```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved look-ahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}

    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        num_nearest = max(int(len(unvisited_nodes) * threshold), 1)
        nearest_unvisited = sorted(unvisited_nodes, key=lambda x: distance_matrix[node][x])[:num_nearest]

        look_ahead_score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        for neighbor in nearest_unvisited:
            look_ahead_score += c1 * distance_matrix[node][neighbor] - c4 * distance_matrix[destination_node][neighbor]

        scores[node] = look_ahead_score

    next_node = min(scores, key=scores.get)
    return next_node
```

