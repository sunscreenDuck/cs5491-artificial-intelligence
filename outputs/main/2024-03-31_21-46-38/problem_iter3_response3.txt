```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        future_nodes = unvisited_nodes - {node}
        
        future_distances = []
        for future_node in future_nodes:
            future_distances.extend([distance_matrix[future_node][i] for i in future_nodes if i != future_node])
        average_future_distance = np.mean(future_distances) if future_distances else 0
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * average_future_distance
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In the mutated function, I have added a look-ahead mechanism to consider the impact of multiple future nodes. I calculate the average distance between future nodes and use it as an additional factor in the scoring calculation. I have also added a threshold weighting to adjust the impact of the future distances.
