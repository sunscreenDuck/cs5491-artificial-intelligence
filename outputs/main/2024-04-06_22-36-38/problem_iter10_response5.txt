```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)
    
    # Calculate the inverse of the normalized matrix
    inverse_matrix = 1 / normalized_matrix
    
    # Calculate the normalized inverse matrix by subtracting the mean and dividing by the standard deviation
    normalized_inverse_matrix = (inverse_matrix - np.mean(inverse_matrix)) / np.std(inverse_matrix)
    
    # Apply sparsification by setting unpromising elements to zero
    threshold = np.mean(normalized_inverse_matrix) - np.std(normalized_inverse_matrix)
    sparsified_matrix = np.where(normalized_inverse_matrix < threshold, 0, normalized_inverse_matrix)
    
    return sparsified_matrix
```
