```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = {
        'distance_to_current': 0.45,
        'average_distance_to_unvisited': 0.3,
        'std_dev_distance_to_unvisited': 0.2,
        'distance_to_destination': 0.05
    }
    
    scores = {}
    for node in unvisited_nodes:
        distances_to_unvisited = distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        
        score = (
            weights['distance_to_current'] * distance_matrix[current_node, node] +
            weights['average_distance_to_unvisited'] * average_distance_to_unvisited -
            weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited -
            weights['distance_to_destination'] * distance_matrix[destination_node, node]
        )
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In this improved code, I have made the following changes:

1. Introduced a dictionary `weights` to store the weights assigned to different factors.
2. Adjusted the weights for different factors based on their relevance and impact on the solution.
3. Simplified the score calculation by directly multiplying the weights with the corresponding factors.
4. Updated the final score calculation to sum up the weighted factors.
5. Used meaningful variable names to improve code readability.
6. Enclosed the code in a Python code block for easy usage.
