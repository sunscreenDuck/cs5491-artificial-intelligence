```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance of each node to all other nodes
    node_distances = np.sum(distance_matrix, axis=1)
    avg_distance = np.mean(node_distances)

    # Calculate the standard deviation of the distances
    std_distance = np.std(node_distances)

    # Initialize the heuristics matrix with zeros
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate the heuristics based on the average and standard deviation
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            heuristics_matrix[i, j] = (distance_matrix[i, j] - avg_distance) / std_distance

    return heuristics_matrix
```
The `heuristics_v2` function improves upon `heuristics_v1` by incorporating more information about the distance matrix. It calculates the average distance of each node to all other nodes, and determines the standard deviation of these distances. The heuristics for each edge are then calculated by subtracting the average distance and dividing by the standard deviation. This takes into account the relative distance of each edge compared to the average and standard deviation, which can help guide the local search process.
