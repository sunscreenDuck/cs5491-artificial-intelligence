```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:

    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    num_unvisited_nodes = len(unvisited_nodes)
    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        
        all_distances = distance_matrix[node][unvisited_node_list]
        unvisited_distances = np.concatenate([all_distances, [distance_matrix[node][current_node], distance_matrix[node][destination_node]]])
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)

        look_ahead_scores = []
        for next_node in unvisited_node_list:
            next_all_distances = distance_matrix[next_node][unvisited_node_list]
            next_unvisited_distances = np.concatenate([next_all_distances, [distance_matrix[next_node][current_node], distance_matrix[next_node][destination_node]]])
            next_average_distance_to_unvisited = np.mean(next_unvisited_distances)
            next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances)

            next_score = (c1 * distance_matrix[current_node][next_node] - 
                          c2 * next_average_distance_to_unvisited + 
                          c3 * next_std_dev_distance_to_unvisited - 
                          c4 * distance_matrix[destination_node][next_node]) / num_unvisited_nodes
            look_ahead_scores.append(next_score)

        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0
        score = (c1 * distance_matrix[current_node][node] - 
                 c2 * average_distance_to_unvisited + 
                 c3 * std_dev_distance_to_unvisited - 
                 c4 * distance_matrix[destination_node][node] + 
                 threshold * lookahead_score)
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
[Explanation]:
1. The new `select_next_node_v2` function is an improved version of the previous `select_next_node_v1` function for solving the TSP.
2. The mutated function includes a new factor `num_unvisited_nodes` to capture the number of unvisited nodes. This factor is used to normalize the scores when calculating the next_score for each possible next_node. This normalization helps to keep the scores consistent across instances with different numbers of unvisited nodes.
3. By normalizing the lookahead_scores by `num_unvisited_nodes`, it adjusts the influence of lookahead information based on how many unvisited nodes are left in the search, giving more importance to lookahead scores when fewer nodes are remaining.
4. All the other parts of the code remain the same as in the previous version.
