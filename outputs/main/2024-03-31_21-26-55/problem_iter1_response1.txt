```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with lookahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        lookahead_score = 0
        for next_node in set(unvisited_nodes) - {node}:
            all_distances_next = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
            average_distance_to_unvisited_next = np.mean(all_distances_next)
            std_dev_distance_to_unvisited_next = np.std(all_distances_next)
            
            lookahead_score += c1 * distance_matrix[node][next_node] - c2 * average_distance_to_unvisited_next + c3 * std_dev_distance_to_unvisited_next - c4 * distance_matrix[destination_node][next_node]
        
        score += threshold * lookahead_score
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
The improved `select_next_node_v2` function incorporates a look-ahead mechanism to evaluate the potential benefits of visiting the next node in combination with all other unvisited nodes. This is done by calculating a lookahead score that considers the distances and statistics of distances to unvisited nodes based on visiting the current node first and then proceeding to each other unvisited node. The lookahead score is then multiplied by a threshold factor before being added to the original score. The node with the highest combined score is selected as the next node to visit.
