```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes using look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes.copy()
        remaining_nodes.remove(node)
        
        all_distances = [distance_matrix[node][i] for i in remaining_nodes]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        num_look_ahead_nodes = min(int(threshold * len(remaining_nodes)), len(remaining_nodes)-1)
        look_ahead_nodes = sorted(remaining_nodes, key=lambda x: distance_matrix[node][x])[:num_look_ahead_nodes]
        
        look_ahead_distances = [distance_matrix[node][i] for i in look_ahead_nodes]
        average_distance_look_ahead = np.mean(look_ahead_distances)
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + c4 * average_distance_look_ahead
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In the improved `select_next_node_v2` function, I added a look-ahead mechanism that considers a subset of unvisited nodes. The number of look-ahead nodes is determined by the `threshold` and is chosen based on the closest nodes to the current node. The average distance for the selected look-ahead nodes is calculated and added as an additional score component. The final decision of the next node is still determined based on the overall score computed using the original components.
