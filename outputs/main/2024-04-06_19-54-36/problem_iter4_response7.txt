```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    
    # Normalize the distance matrix to have values between 0 and 1.
    max_value = np.max(distance_matrix)
    min_value = np.min(distance_matrix)
    normalized_matrix = (distance_matrix - min_value) / (max_value - min_value)
    
    # Calculate the average distance for each node
    average_distances = np.mean(normalized_matrix, axis=1)
    
    # Calculate the node degrees
    node_degrees = np.count_nonzero(normalized_matrix, axis=1)
    
    for i in range(n):
        for j in range(n):
            # Calculate the combined factor
            combined_factor = normalized_matrix[i, j] * (1 / node_degrees[i]) * (1 / average_distances[j])
            
            # Set unpromising elements to zero
            heuristics_matrix[i, j] = combined_factor if combined_factor > 0 else 0
    
    return heuristics_matrix
```
