```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)
    
    # Calculate the mean and standard deviation of the normalized matrix
    mean = np.mean(normalized_matrix)
    std_dev = np.std(normalized_matrix)
    
    # Calculate the normalized inverted matrix by subtracting the mean and dividing by the standard deviation
    normalized_inverse_matrix = (normalized_matrix - mean) / std_dev
    
    # Apply sparsification by setting unpromising elements to zero
    threshold = np.median(normalized_inverse_matrix) - np.std(normalized_inverse_matrix)
    sparsified_matrix = np.where(normalized_inverse_matrix < threshold, 0, normalized_inverse_matrix)
    
    return sparsified_matrix
```
In the `heuristics_v2` function, I have made the following changes:
1. Instead of calculating the inverse matrix, I directly calculate the normalized inverse matrix by subtracting the mean and dividing by the standard deviation.
2. I use the median of the normalized inverse matrix instead of the mean for threshold calculation. This can help eliminate potential outliers and provide a more robust threshold value.
3. I use `np.where` instead of copying the matrix and then setting values to zero. This avoids unnecessary memory allocation and copying.

These changes should help improve the performance and efficiency of the heuristics function for the Traveling Salesman Problem.
