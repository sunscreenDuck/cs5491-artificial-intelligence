Here's an improved version of the `heuristics_v1` function, called `heuristics_v2`, which assigns higher priorities to longer edges.

```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the maximum and minimum distances in the distance matrix
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    
    # Calculate the range of distances
    distance_range = max_distance - min_distance
    
    # Calculate the normalized distances
    normalized_distances = (distance_matrix - min_distance) / distance_range
    
    # Calculate the priorities based on the normalized distances
    priorities = 1 - normalized_distances
    
    return priorities
```

The `heuristics_v2` function first calculates the maximum and minimum distances in the distance matrix. It then calculates the range of distances by subtracting the minimum distance from the maximum distance. Next, it normalizes the distances by subtracting the minimum distance and dividing by the range. Finally, it calculates the priorities by subtracting the normalized distances from 1.

Note: This implementation assumes that the distance matrix is a NumPy array. Make sure to import the NumPy library if it is not already imported.
