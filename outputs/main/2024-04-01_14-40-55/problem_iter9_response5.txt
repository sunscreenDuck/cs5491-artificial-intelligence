```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    
    threshold = 0.5
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}

    current_distances = distance_matrix[current_node]
    destination_distances = distance_matrix[destination_node]

    for node in unvisited_nodes:
        unvisited_distances = distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)

        next_scores = c1 * current_distances + c2 * average_distance_to_unvisited - c3 * std_dev_distance_to_unvisited - c4 * destination_distances
        lookahead_scores = []
        for next_node in unvisited_nodes - {node}:
            next_unvisited_distances = distance_matrix[next_node, list(unvisited_nodes - {node, next_node})]
            next_average_distance_to_unvisited = np.mean(next_unvisited_distances)
            next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances)

            lookahead_score = c1 * current_distances[next_node] + c2 * next_average_distance_to_unvisited - c3 * next_std_dev_distance_to_unvisited - c4 * destination_distances[next_node]
            lookahead_scores.append(lookahead_score)

        lookahead_scores = np.array(lookahead_scores)
        lookahead_score = np.mean(lookahead_scores) if len(lookahead_scores) > 0 else 0
        score = next_scores[node] + threshold * lookahead_score
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
