```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        neighbors = [i for i in unvisited_nodes if i != node]
        all_distances = [distance_matrix[node][i] for i in neighbors]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate distance to destination
        distance_to_destination = distance_matrix[destination_node][node]
        
        # Weighted sum of objective functions
        score = c1 * distance_matrix[current_node][node] \
                - c2 * average_distance_to_unvisited \
                + c3 * std_dev_distance_to_unvisited \
                - c4 * distance_to_destination
                
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
```
