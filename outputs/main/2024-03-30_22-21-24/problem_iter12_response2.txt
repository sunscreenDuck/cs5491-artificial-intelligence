```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    # Define weights for the scoring function
    weights = np.array([0.4, 0.3, 0.2, 0.1])
    
    # Calculate the distances from the current node to all unvisited nodes
    current_to_unvisited_distances = distance_matrix[current_node, list(unvisited_nodes)]
    
    # Calculate the average and standard deviation of distances between unvisited nodes
    unvisited_to_unvisited_distances = distance_matrix[np.ix_(list(unvisited_nodes), list(unvisited_nodes))]
    average_distance_between_unvisited = np.mean(unvisited_to_unvisited_distances)
    std_dev_distance_between_unvisited = np.std(unvisited_to_unvisited_distances)
    
    # Calculate the distances from the destination node to all unvisited nodes
    destination_to_unvisited_distances = distance_matrix[destination_node, list(unvisited_nodes)]
    
    # Calculate the scores for all unvisited nodes
    scores = np.dot(np.array([
        current_to_unvisited_distances,
        -average_distance_between_unvisited,
        std_dev_distance_between_unvisited,
        -destination_to_unvisited_distances
    ]), weights)
    
    # Select the node with the lowest score as the next node to visit
    next_node = np.argmin(scores)
    
    return next_node
```
