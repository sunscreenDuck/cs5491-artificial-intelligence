```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.35, 0.3, 0.25, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        look_ahead_distance = distance_matrix[node][destination_node]
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * look_ahead_distance
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
In this code mutation, the weight parameters c1, c2, c3, c4 have been slightly adjusted to better balance the importance of different factors. The scoring function now includes a look-ahead mechanism by incorporating the distance from the current node to the destination node. This allows considering the potential impact of future choices on the overall TSP solution.
