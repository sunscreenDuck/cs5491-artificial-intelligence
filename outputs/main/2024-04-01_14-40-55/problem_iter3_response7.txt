```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    # Calculate average distance and standard deviation for all unvisited nodes
    all_distances = distance_matrix[current_node, :]
    unvisited_distances = all_distances[list(unvisited_nodes)]
    average_distance_to_unvisited = np.mean(unvisited_distances)
    std_dev_distance_to_unvisited = np.std(unvisited_distances)
    
    for node in unvisited_nodes:
        score = (
            c1 * distance_matrix[current_node][node]
            - c2 * average_distance_to_unvisited
            + c3 * std_dev_distance_to_unvisited
            - c4 * distance_matrix[destination_node][node]
        )
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In `select_next_node_v2`, I have made the following improvements:
1. I moved the calculation of average distance and standard deviation outside the loop to reduce unnecessary calculations. Since the unvisited nodes remain the same throughout the loop, I only need to compute these values once.
2. I adjusted the code structure to better optimize the usage of the NumPy array operations.
