```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)
    
    # Calculate the inverse of the normalized matrix
    inverse_matrix = 1 / normalized_matrix
    
    # Calculate the mean and standard deviation of the inverse matrix
    mean = np.mean(inverse_matrix)
    std_dev = np.std(inverse_matrix)
    
    # Calculate the threshold for sparsification
    threshold = mean - std_dev
    
    # Sparsify the matrix by setting unpromising elements to zero
    sparsified_matrix = np.where(inverse_matrix < threshold, 0, inverse_matrix)
    
    return sparsified_matrix
```
The `heuristics_v2` function normalizes the distance matrix by dividing it by the maximum value of the matrix. Then it calculates the inverse of the normalized matrix. After that, it computes the mean and standard deviation of the inverse matrix. Finally, it determines the threshold for sparsification by subtracting the standard deviation from the mean. The matrix is then sparsified by setting unpromising elements to zero using `np.where`.
