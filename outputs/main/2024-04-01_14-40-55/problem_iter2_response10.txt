```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with an improved look-ahead mechanism."""
    threshold = 0.5
    c1, c2, c3, c4, c5 = 0.4, 0.2, 0.2, 0.1, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        min_distance_to_unvisited = np.min(all_distances) if all_distances else 0
        std_dev_distance_to_unvisited = np.std(all_distances)
        num_unvisited = len(unvisited_nodes)
        
        look_aheads = []
        for next_node in unvisited_nodes:
            if next_node != node:
                next_all_distances = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
                next_average_distance_to_unvisited = np.mean(next_all_distances)
                next_min_distance_to_unvisited = np.min(next_all_distances) if next_all_distances else 0
                next_std_dev_distance_to_unvisited = np.std(next_all_distances)
                next_num_unvisited = num_unvisited - 1

                next_score = c1 * distance_matrix[current_node][next_node] + c2 * (1 / next_min_distance_to_unvisited) + c3 * next_average_distance_to_unvisited - c4 * next_std_dev_distance_to_unvisited + c5 * next_num_unvisited
                look_aheads.append(next_score)
        
        lookahead_score = np.mean(look_aheads)
        score = c1 * distance_matrix[current_node][node] + c2 * (1 / min_distance_to_unvisited) + c3 * average_distance_to_unvisited - c4 * std_dev_distance_to_unvisited + c5 * num_unvisited + threshold * lookahead_score
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In this improved `select_next_node_v2` function, the changes made include:
1. Adjusted the threshold value for the look-ahead score.
2. Added a new weight parameter `c5` to balance the importance of the number of unvisited nodes (encouraging exploration).
3. Calculated the minimum distance to unvisited nodes in addition to average and standard deviation.
4. Considered a reciprocal of the minimum distance in the score calculation to prioritize nodes with a small minimum distance.
5. Updated the look-ahead mechanism to incorporate the new factors.
6. Overall, the improved function takes into account more factors and better balances their importance in the score calculation.
