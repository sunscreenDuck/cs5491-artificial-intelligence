```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    lookahead = 3
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        node_distances = distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(node_distances)
        std_dev_distance_to_unvisited = np.std(node_distances)
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        lookahead_scores = []
        for lookahead_node in unvisited_nodes:
            if lookahead_node != node:
                lookahead_distances = distance_matrix[lookahead_node, list(unvisited_nodes - {lookahead_node, node})]
                lookahead_average = np.mean(lookahead_distances)
                lookahead_std_dev = np.std(lookahead_distances)
                
                lookahead_score = c1 * distance_matrix[node][lookahead_node] - c2 * lookahead_average + c3 * lookahead_std_dev - c4 * distance_matrix[destination_node][lookahead_node]
                lookahead_scores.append(lookahead_score)
                
        if lookahead_scores:
            score += threshold * np.max(lookahead_scores)
            
        scores[node] = score
        
    next_node = min(scores, key=scores.get)
    return next_node
```
