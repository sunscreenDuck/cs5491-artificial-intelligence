```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the inverse of the distance matrix
    inverse_distance_matrix = 1 / distance_matrix

    # Normalize the inverse distance matrix
    normalized_matrix = inverse_distance_matrix / np.sum(inverse_distance_matrix)

    # Apply a weight to each element in the normalized matrix
    weighted_matrix = normalized_matrix * (1 - normalized_matrix)

    # Sparsify the matrix by setting unpromising elements to zero
    threshold = np.mean(weighted_matrix)
    sparsified_matrix = np.where(weighted_matrix >= threshold, weighted_matrix, 0)

    return sparsified_matrix
```
The function `heuristics_v2` first computes the inverse of the distance matrix and then normalizes it by dividing by the sum of all elements in the matrix. This normalization step ensures that the matrix represents the probabilities of selecting each edge.

It then applies a weight to each element in the normalized matrix, which is calculated as (1 - normalized value). This weight represents the factor of how promising it is to select each edge. Higher values indicate more promising edges.

Finally, the function sparsifies the matrix by setting all elements below the mean of the weighted matrix to zero. This step removes unpromising elements from consideration in the optimization process, effectively reducing the search space.

Note: The provided code assumes that you have imported the `numpy` library as `np`.
