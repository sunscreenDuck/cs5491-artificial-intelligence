```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)

    # Exploit symmetrical operations
    symmetrical_matrix = normalized_matrix + normalized_matrix.T

    # Calculate statistical measures for sparsification
    mean_value = np.mean(symmetrical_matrix)
    std_value = np.std(symmetrical_matrix)
    threshold = mean_value + std_value

    # Apply heuristics based on distribution of edge weights
    promising_edges = np.where(symmetrical_matrix < threshold, symmetrical_matrix, 0)
    
    return promising_edges
```
```
