```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        lookahead_score = 0
        for next_node in unvisited_nodes:
            if next_node != node:
                lookahead_distance = distance_matrix[node][next_node]
                lookahead_average_distance = (average_distance_to_unvisited * (len(unvisited_nodes) - 1) + lookahead_distance) / len(unvisited_nodes)
                lookahead_std_dev_distance = np.sqrt(((std_dev_distance_to_unvisited ** 2) * (len(unvisited_nodes) - 1) + (lookahead_distance - lookahead_average_distance) ** 2) / len(unvisited_nodes))
                lookahead_score += c1 * lookahead_distance - c2 * lookahead_average_distance + c3 * lookahead_std_dev_distance
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_score
        scores[node] = score
    
    next_node = max(scores, key=scores.get)
    return next_node
```
[Reflection]
1. The lookahead mechanism considers the potential future impact of each possible next node. It can be effective in improving the overall performance by reducing the number of suboptimal choices and exploring better paths.
2. The scoring factors in the score calculation reflect the trade-off between exploration and exploitation. The weights of the factors determine the importance given to each aspect. Adjusting the weights can result in different strategies for selecting the next node.
3. Utilizing statistical measures like average and standard deviation allows for a more informed selection process. They provide insights into the distribution and variation of distances, enabling better decision-making.
4. Experimenting with different weight combinations for the scoring factors can help fine-tune the heuristics and find the best set of weights for a specific problem instance.
