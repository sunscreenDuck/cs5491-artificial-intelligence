```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    # Normalize the distance matrix
    normalized_distance_matrix = distance_matrix.copy()
    max_distance = np.max(normalized_distance_matrix)
    normalized_distance_matrix /= max_distance
    
    # Define weights
    c1, c2, c3, c4 = 0.35, 0.25, 0.25, 0.15
    
    scores = {}
    for node in unvisited_nodes:
        # Calculate average distance to unvisited nodes
        distances_to_unvisited = normalized_distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        
        # Calculate standard deviation of distances to unvisited nodes
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        
        # Calculate score
        score = c1 * normalized_distance_matrix[current_node, node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * normalized_distance_matrix[destination_node, node]
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
