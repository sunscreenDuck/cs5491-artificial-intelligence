```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = [0.4, 0.3, 0.2, 0.1]
    look_ahead_nodes = 3
    
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        look_ahead_scores = []
        for next_node in unvisited_nodes:
            if next_node != node:
                next_distances = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node and i != node]
                next_avg_distance_to_unvisited = np.mean(next_distances)
                next_std_dev_distance_to_unvisited = np.std(next_distances)
                
                look_ahead_score = (
                    weights[0] * distance_matrix[current_node][node] + 
                    weights[1] * average_distance_to_unvisited + 
                    weights[2] * std_dev_distance_to_unvisited +
                    weights[3] * distance_matrix[destination_node][next_node] +
                    0.2 * distance_matrix[node][next_node] -
                    0.1 * next_avg_distance_to_unvisited -
                    0.1 * next_std_dev_distance_to_unvisited
                )
                look_ahead_scores.append(look_ahead_score)
        
        score = max(look_ahead_scores) if look_ahead_scores else 0
        scores[node] = score
        
    next_node = max(scores, key=scores.get)
    return next_node
```

