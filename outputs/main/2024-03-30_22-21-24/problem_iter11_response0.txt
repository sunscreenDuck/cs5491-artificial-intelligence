```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4 = 0.35, 0.25, 0.25, 0.15
    curr_to_unvisited = distance_matrix[current_node, list(unvisited_nodes)]
    unvisited_to_dest = distance_matrix[list(unvisited_nodes), destination_node]

    scores = (c1 * curr_to_unvisited) - (c2 * np.mean(curr_to_unvisited)) + (c3 * np.std(curr_to_unvisited)) - (c4 * unvisited_to_dest)

    next_node = np.argmin(scores)
    return next_node
```
In this `select_next_node_v2` function, I have used numpy operations to calculate the distances between the current node and each unvisited node, as well as the distances between each unvisited node and the destination node. I have also used numpy functions to calculate the mean and standard deviation of the distances to the unvisited nodes.

By directly working with numpy arrays and using vectorized operations, this code should provide faster performance compared to the original code.
Please note that this code assumes that the distance matrix is a numpy ndarray and that the unvisited_nodes set contains valid node indices corresponding to the distance matrix.
