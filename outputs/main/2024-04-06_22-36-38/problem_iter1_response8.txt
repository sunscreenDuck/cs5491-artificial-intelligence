```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    factors = np.zeros((n, n))

    # Combine various factors
    factors += 1 / distance_matrix
    factors += 1 / np.max(distance_matrix) - distance_matrix / np.max(distance_matrix)
    factors += (1 / np.sum(distance_matrix, axis=1)).reshape(n, 1)

    # Sparsify the matrix by setting unpromising elements to zero
    factors[factors < np.mean(factors)] = 0

    return factors
```
The improved `heuristics_v2` function combines multiple factors to determine the promising nature of each edge. It includes the inverse of the distance matrix, the normalized difference between the maximum distance and the actual distance, and the inverse of the sum of distances for each node.

To sparsify the matrix, the function sets elements with values below the mean value of all factors to zero.
