```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:

    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    
    # Calculate distances to unvisited nodes
    distances = distance_matrix[current_node][list(unvisited_nodes)]
    
    # Calculate average and standard deviation distances to unvisited nodes
    average_distance = np.mean(distances)
    std_dev_distance = np.std(distances)
    
    # Calculate scores for unvisited nodes
    scores = c1 * distances - c2 * average_distance + c3 * std_dev_distance - c4 * distance_matrix[destination_node][list(unvisited_nodes)]
    
    # Select the node with the minimum score
    next_node = list(unvisited_nodes)[np.argmin(scores)]
    
    return next_node
```
The `select_next_node_v2` function has simplified the calculation of scores by removing unnecessary terms and normalizations. It also uses numpy operations to calculate average and standard deviation distances, which improves efficiency.
