```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with look-ahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        lookahead_score = 0.0
        lookahead_count = 0
        
        for next_node in unvisited_nodes:
            if next_node != node:
                lookahead_distance = distance_matrix[node][next_node]
                lookahead_cost = c1 * lookahead_distance - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
                
                if lookahead_cost > threshold * scores[node]:
                    lookahead_score += lookahead_cost
                    lookahead_count += 1
        
        if lookahead_count > 0:
            scores[node] = scores[node] + lookahead_score / lookahead_count
        else:
            scores[node] = 0
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In this improved version `select_next_node_v2`, a look-ahead mechanism is used to evaluate the potential future benefit of visiting each unvisited node. For each unvisited node, all possible next nodes are considered and a lookahead cost is calculated. If the lookahead cost exceeds a threshold (in this case, 70% of the current score), it is added to the current score for that node. The next node is then selected based on the highest score.
