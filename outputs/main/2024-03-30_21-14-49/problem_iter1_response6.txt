```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        scores[node] = score
    
    lookahead_scores = {}
    for node in scores:
        lookahead_score = 0
        for next_node in unvisited_nodes:
            if next_node != node:
                lookahead_score += c1 * distance_matrix[node][next_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
        lookahead_scores[node] = lookahead_score
    
    next_node = min(lookahead_scores, key=lookahead_scores.get)
    return next_node
```
In `select_next_node_v2`, we added a look-ahead mechanism that considers the scores of potential next nodes if selected. We calculate the lookahead score for each node by summing the scores of all possible next nodes. The node with the minimum lookahead score is selected as the next node to visit.
