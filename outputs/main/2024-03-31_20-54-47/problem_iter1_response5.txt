```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray, look_ahead: int) -> int:
    """Select the next node to visit from the unvisited nodes using look-ahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        lookahead_scores = []
        for lookahead_value in range(1, look_ahead + 1):
            lookahead_next_node = select_next_node_v2(node, destination_node, unvisited_nodes, distance_matrix, lookahead_value)
            lookahead_score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][lookahead_next_node]
            lookahead_scores.append(lookahead_score)
        
        score = max(lookahead_scores) if lookahead_scores else 0
        scores[node] = score

    next_node = max(scores, key=scores.get)
    return next_node
```

