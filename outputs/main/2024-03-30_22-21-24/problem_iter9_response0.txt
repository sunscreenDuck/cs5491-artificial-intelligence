```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = np.array([0.35, 0.25, 0.25, 0.15])
    
    scores = {}
    for node in unvisited_nodes:
        distances_to_unvisited = distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        
        score = np.dot(weights, [distance_matrix[current_node, node], -average_distance_to_unvisited, std_dev_distance_to_unvisited, -distance_matrix[destination_node, node]])
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In the improved code, I replaced the individual weighting variables `c1`, `c2`, `c3`, and `c4` with a single `weights` array, which makes the code more readable and scalable. Instead of manually multiplying the weights with the corresponding features, I used the `np.dot` function to compute the weighted sum of the features. This helps simplify the code and potentially improve performance.
