```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""

    # Define the weights for each criterion
    weights = {
        'distance_to_current': 0.4,
        'average_distance_to_unvisited': 0.3,
        'std_dev_distance_to_unvisited': 0.2,
        'distance_to_destination': 0.1
    }

    scores = {}

    for node in unvisited_nodes:
        # Calculate distances to unvisited nodes for the current node
        distances_to_unvisited = distance_matrix[node, list(unvisited_nodes - {node})]

        # Calculate average distance and standard deviation to unvisited nodes for the current node
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)

        # Calculate the score using the weights and criteria values
        score = (
            weights['distance_to_current'] * distance_matrix[current_node, node]
            - weights['average_distance_to_unvisited'] * average_distance_to_unvisited
            + weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited
            - weights['distance_to_destination'] * distance_matrix[destination_node, node]
        )

        scores[node] = score

    # Select the node with the minimum score
    next_node = min(scores, key=scores.get)
    return next_node
```
