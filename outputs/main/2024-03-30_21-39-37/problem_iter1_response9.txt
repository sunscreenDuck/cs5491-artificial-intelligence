```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with look-ahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        lookahead_score = 0
        if len(unvisited_nodes) > 1:
            next_node_1, distance_1 = None, float('inf')
            next_node_2, distance_2 = None, float('inf')
            
            for next_node in unvisited_nodes.difference([node]):
                lookahead_distance = distance_matrix[node][next_node] + distance_matrix[next_node][destination_node]
                if lookahead_distance < distance_1:
                    next_node_2, distance_2 = next_node_1, distance_1
                    next_node_1, distance_1 = next_node, lookahead_distance
                elif lookahead_distance < distance_2:
                    next_node_2, distance_2 = next_node, lookahead_distance
            
            lookahead_score = distance_1 - distance_2

        scores[node] = score + threshold * lookahead_score

    next_node = min(scores, key=scores.get)
    return next_node
```
