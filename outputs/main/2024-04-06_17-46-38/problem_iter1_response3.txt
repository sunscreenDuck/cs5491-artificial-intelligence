```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the inverse of the distance matrix
    inverse_matrix = 1 / distance_matrix

    # Calculate the minimum value in the inverse matrix
    min_value = np.min(inverse_matrix)

    # Add a small constant to the inverse matrix to avoid division by zero
    inverse_matrix = inverse_matrix + min_value / 10

    # Calculate the sum of the inverse matrix
    sum_matrix = np.sum(inverse_matrix)

    # Normalize the inverse matrix by dividing each element by the sum
    normalized_matrix = inverse_matrix / sum_matrix

    # Set elements with low values to zero to sparsify the matrix
    threshold = 0.1
    sparse_matrix = np.where(normalized_matrix < threshold, 0, normalized_matrix)

    return sparse_matrix
```

In `heuristics_v2`, we first calculate the inverse of the distance matrix. Then, we add a small constant to the matrix to avoid division by zero. Next, we calculate the sum of the matrix and normalize it by dividing each element by the sum. Finally, we set elements with low values to zero to sparsify the matrix.
