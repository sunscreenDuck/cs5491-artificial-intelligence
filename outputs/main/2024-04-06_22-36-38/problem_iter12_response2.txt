```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the mean and standard deviation of the distance matrix
    mean = np.mean(distance_matrix)
    std_dev = np.std(distance_matrix)
    
    # Calculate the inverted normalized matrix and apply sparsification
    threshold = np.mean(1 / distance_matrix) - np.std(1 / distance_matrix)
    sparsified_matrix = (1 / distance_matrix).copy()
    sparsified_matrix[sparsified_matrix < threshold] = 0
    
    return sparsified_matrix
```
