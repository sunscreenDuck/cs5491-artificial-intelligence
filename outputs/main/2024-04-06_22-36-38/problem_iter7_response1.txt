```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)
    
    # Calculate the inverse of the normalized matrix
    inverse_matrix = 1 / normalized_matrix
    
    # Calculate the max and min of the inverse matrix
    max_val = np.max(inverse_matrix)
    min_val = np.min(inverse_matrix)
    
    # Calculate the normalized inverse matrix by scaling the values between 0 and 1
    normalized_inverse_matrix = (inverse_matrix - min_val) / (max_val - min_val)
    
    # Apply sparsification by setting unpromising elements to zero
    threshold = np.mean(normalized_inverse_matrix) - np.std(normalized_inverse_matrix)
    sparsified_matrix = normalized_inverse_matrix.copy()
    sparsified_matrix[sparsified_matrix < threshold] = 0
    
    return sparsified_matrix
```
