```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4, c5 = 0.3, 0.2, 0.2, 0.15, 0.15
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        look_ahead_score = 0
        if len(unvisited_nodes) > 1:
            next_node_scores = {}
            for next_node in unvisited_nodes:
                if next_node != node:
                    new_unvisited_nodes = unvisited_nodes.copy()
                    new_unvisited_nodes.remove(node)
                    all_distances = [distance_matrix[next_node][i] for i in new_unvisited_nodes]
                    average_distance_to_unvisited = np.mean(all_distances)
                    std_dev_distance_to_unvisited = np.std(all_distances)
                    next_node_scores[next_node] = c1 * distance_matrix[current_node][next_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
            best_next_node = max(next_node_scores, key=next_node_scores.get)
            look_ahead_score = c5 * next_node_scores[best_next_node]            

        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + look_ahead_score
        scores[node] = score
    next_node = max(scores, key=scores.get)
    return next_node
```
