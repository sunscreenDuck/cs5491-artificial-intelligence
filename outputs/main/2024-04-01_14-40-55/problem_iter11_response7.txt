```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""

    threshold = 0.5
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        
        unvisited_distances = distance_matrix[node][unvisited_node_list]
        min_distance_to_unvisited = np.min(unvisited_distances)
        max_distance_to_unvisited = np.max(unvisited_distances)

        look_ahead_scores = []
        for next_node in unvisited_node_list:
            next_unvisited_distances = distance_matrix[next_node][unvisited_node_list]
            next_min_distance_to_unvisited = np.min(next_unvisited_distances)
            next_max_distance_to_unvisited = np.max(next_unvisited_distances)

            next_score = c1 * distance_matrix[current_node][next_node] + \
                         c2 * (min_distance_to_unvisited - next_min_distance_to_unvisited) / max_distance_to_unvisited + \
                         c3 * (max_distance_to_unvisited - next_max_distance_to_unvisited) / max_distance_to_unvisited - \
                         c4 * distance_matrix[destination_node][next_node]

            look_ahead_scores.append(next_score)

        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0
        score = c1 * distance_matrix[current_node][node] + \
                c2 * (min_distance_to_unvisited - np.min(unvisited_distances)) / max_distance_to_unvisited + \
                c3 * (max_distance_to_unvisited - np.max(unvisited_distances)) / max_distance_to_unvisited - \
                c4 * distance_matrix[destination_node][node] + \
                threshold * lookahead_score

        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
