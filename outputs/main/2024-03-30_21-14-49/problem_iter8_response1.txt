```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    weights = [0.4, 0.3, 0.2, 0.1]
    
    scores = {}
    for node in unvisited_nodes:
        unvisited_distances = distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)
        
        score = np.dot(weights, np.array([
            distance_matrix[current_node, node],
            -average_distance_to_unvisited,
            std_dev_distance_to_unvisited,
            -distance_matrix[destination_node, node]
        ]))
        
        if score > threshold:
            scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
[Explanation]
The improved `select_next_node_v2` function simplifies the calculation by using the dot product to compute the score for each unvisited node. It removes unnecessary variables and iterations to improve efficiency. Additionally, it includes a threshold value to filter out nodes with low scores, avoiding unnecessary calculations for those nodes.
