```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""

    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1

    scores = {}
    for node in unvisited_nodes:
        distances_to_unvisited = distance_matrix[node, list(unvisited_nodes - {node})]
        
        # Remove outliers
        avg_dist = np.mean(distances_to_unvisited)
        std_dist = np.std(distances_to_unvisited)
        threshold = 2  # Change the threshold value if required
        filtered_dist = [dist for dist in distances_to_unvisited if abs(dist - avg_dist) <= threshold * std_dist]

        average_distance_to_unvisited = np.mean(filtered_dist)
        std_dev_distance_to_unvisited = np.std(filtered_dist)
        
        # Normalize weights by sum
        total_weight = c1 + c2 + c3 + c4
        c1, c2, c3, c4 = c1 / total_weight, c2 / total_weight, c3 / total_weight, c4 / total_weight

        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```

