```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the inverse of the distance matrix
    inv_distance_matrix = 1 / distance_matrix
    
    # Calculate the minimum value of the inverse distance matrix
    min_value = np.min(inv_distance_matrix[np.nonzero(inv_distance_matrix)])
    
    # Normalize the inverse distance matrix by the minimum value
    normalized_matrix = inv_distance_matrix / min_value
    
    # Calculate the sum of each row in the normalized matrix
    row_sum = np.sum(normalized_matrix, axis=1)
    
    # Calculate the average of each row in the normalized matrix
    row_avg = np.average(normalized_matrix, axis=1)
    
    # Calculate the product of each row in the normalized matrix
    row_prod = np.prod(normalized_matrix, axis=1)
    
    # Combine the factors to determine the promise of selecting an edge
    promise_matrix = row_sum + row_avg + row_prod
    
    # Sparsify the matrix by setting unpromising elements to zero
    threshold = np.mean(promise_matrix)
    sparsified_matrix = np.where(promise_matrix > threshold, promise_matrix, 0)
    
    return sparsified_matrix
```

