```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the inverse of the distance matrix
    inverse_matrix = 1 / distance_matrix
    
    # Compute the maximum distance value in the matrix
    max_distance = np.max(distance_matrix)
    
    # Compute the mean distance value in the matrix
    mean_distance = np.mean(distance_matrix)
    
    # Normalize the inverse matrix by the maximum distance value
    normalized_matrix = inverse_matrix / max_distance
    
    # Compute a sparsity threshold based on the mean distance value
    sparsity_threshold = mean_distance / max_distance
    
    # Sparsify the normalized matrix by setting unpromising elements to zero
    sparsified_matrix = np.where(normalized_matrix < sparsity_threshold, 0, normalized_matrix)
    
    return sparsified_matrix
```
In `heuristics_v2`, I added a few factors to determine how promising it is to select an edge. First, I computed the inverse of the distance matrix to get an indication of how close the nodes are to each other. Then, I normalized the inverse matrix by the maximum distance value to have a value between 0 and 1. Finally, I set a sparsity threshold based on the mean distance value and sparsified the matrix by setting elements below the threshold to zero. This helps in reducing the number of unpromising edges in the solution.
