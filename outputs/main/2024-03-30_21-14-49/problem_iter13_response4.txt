```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = {'distance_to_current': 0.4, 'average_distance_to_unvisited': 0.3, 'std_dev_distance_to_unvisited': 0.2, 'distance_to_destination': 0.1}
    
    scores = {}
    for node in unvisited_nodes:
        unvisited_distances = distance_matrix[node][list(unvisited_nodes.difference({node}))]
        avg_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)
        
        score = (
            weights['distance_to_current'] * distance_matrix[current_node][node] -
            weights['average_distance_to_unvisited'] * avg_distance_to_unvisited +
            weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited -
            weights['distance_to_destination'] * distance_matrix[destination_node][node]
        )
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```

