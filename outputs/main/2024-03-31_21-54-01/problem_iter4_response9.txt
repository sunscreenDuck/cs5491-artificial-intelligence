```python
import numpy as np

def select_next_node_v2(current_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = {'distance_to_current': 0.4,
               'average_distance_to_unvisited': 0.3,
               'std_dev_distance_to_unvisited': 0.2,
               'distance_to_destination': 0.1}
    
    scores = {}
    for node in unvisited_nodes:
        # Calculate the average and standard deviation of distances to other unvisited nodes
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate the score based on the weighted factors
        score = weights['distance_to_current'] * distance_matrix[current_node][node]
        score -= weights['average_distance_to_unvisited'] * average_distance_to_unvisited
        score += weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited
        score -= weights['distance_to_destination'] * distance_matrix[current_node][node]
        
        scores[node] = score
    
    # Select the next node with the highest score
    next_node = max(scores, key=scores.get)
    
    return next_node
```
