```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:

    """Select the next node to visit from the unvisited nodes with improved look-ahead mechanism."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    # Calculate the average and standard deviation for unvisited nodes
    all_average_distance_to_unvisited = []
    all_std_dev_distance_to_unvisited = []
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        all_average_distance_to_unvisited.append(average_distance_to_unvisited)
        all_std_dev_distance_to_unvisited.append(std_dev_distance_to_unvisited)
        
    # Calculate the lookahead scores for each node
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        lookahead_scores = []
        for next_node in unvisited_nodes:
            if next_node == node:
                continue
            
            next_all_distances = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
            next_average_distance_to_unvisited = np.mean(next_all_distances)
            next_std_dev_distance_to_unvisited = np.std(next_all_distances)
            
            next_score = c1 * distance_matrix[node][next_node] - c2 * next_average_distance_to_unvisited + c3 * next_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
            lookahead_scores.append(next_score)
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        if len(lookahead_scores) > 0:
            max_lookahead_score = max(lookahead_scores)
            max_average_distance = max(all_average_distance_to_unvisited)
            max_std_dev_distance = max(all_std_dev_distance_to_unvisited)
            
            score += threshold * (max_lookahead_score + c2 * max_average_distance + c3 * max_std_dev_distance)
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
[Reflection]
1. The improved function incorporates lookahead information by calculating the scores for each node considering multiple lookahead paths.
2. The average distance and standard deviation for unvisited nodes are calculated beforehand and used in scoring to capture the information of the entire unvisited set.
3. The scoring is further improved by considering the maximum lookahead score and the maximum values of average distance and standard deviation among all unvisited nodes. This helps in capturing more information and making better decisions.
