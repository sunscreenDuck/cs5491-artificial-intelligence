```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Normalize the distance matrix
    max_distance = np.max(distance_matrix)
    normalized_matrix = distance_matrix / max_distance

    # Calculate the average distance
    average_distance = np.mean(normalized_matrix[np.nonzero(normalized_matrix)])

    # Calculate the standard deviation of the distance
    distance_std = np.std(normalized_matrix[np.nonzero(normalized_matrix)])

    for i in range(n):
        for j in range(n):
            # Calculate the heuristics value as a combination of factors
            distance_factor = 1 / normalized_matrix[i, j]
            average_distance_factor = average_distance / (normalized_matrix[i, j] ** 2)
            std_factor = distance_std / normalized_matrix[i, j]

            # Combine the factors to determine the heuristics value
            heuristic_value = distance_factor + average_distance_factor + std_factor

            # Set unpromising elements to zero
            if normalized_matrix[i, j] == 0 or heuristic_value < 0.2:
                heuristic_value = 0

            heuristics[i, j] = heuristic_value

    return heuristics
```
In `heuristics_v2`, I simplified the calculation of the heuristics value by removing unnecessary factors and combining the remaining factors directly. I also adjusted the threshold for determining unpromising elements and set distance matrix elements that are already zero to zero in the heuristics matrix to improve efficiency.
