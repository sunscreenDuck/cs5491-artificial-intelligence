```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    threshold = 0.7
    weight_distance_to_current = 0.4
    weight_average_distance_to_unvisited = 0.3
    weight_std_dev_distance_to_unvisited = 0.2
    weight_distance_to_destination = 0.1
    weight_num_unvisited_nodes = 0.5
    
    scores = {}
    
    max_distance = np.amax(distance_matrix)
    normalized_distance_matrix = distance_matrix / max_distance
    
    for node in unvisited_nodes:
        distances = normalized_distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances)
        std_dev_distance_to_unvisited = np.std(distances)
        
        normalized_current_to_node_distance = normalized_distance_matrix[current_node][node]
        normalized_destination_to_node_distance = normalized_distance_matrix[destination_node][node]
        
        score = (
            weight_distance_to_current * normalized_current_to_node_distance -
            weight_average_distance_to_unvisited * average_distance_to_unvisited +
            weight_std_dev_distance_to_unvisited * std_dev_distance_to_unvisited -
            weight_distance_to_destination * normalized_destination_to_node_distance -
            weight_num_unvisited_nodes * len(unvisited_nodes)
        )
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In the improved code, the thresholds and weights are simplified by using separate variables instead of dictionaries. The normalized distance matrix is calculated to avoid bias towards large distances. The function corresponds to the analysis in the reflection section.
