```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""

    # Set the weights for the score calculation
    weights = {'current_distance': 0.4, 'average_distance_to_unvisited': 0.3, 'std_dev_distance_to_unvisited': 0.2, 'lookahead': 0.1}

    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Look-ahead
        lookahead_score = sum(distance_matrix[node][future_node] for future_node in unvisited_nodes if future_node != node) - average_distance_to_unvisited
        
        # Calculate the score for the current node
        score = weights['current_distance'] * distance_matrix[current_node][node] + \
                weights['average_distance_to_unvisited'] * average_distance_to_unvisited + \
                weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited + \
                weights['lookahead'] * lookahead_score
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
