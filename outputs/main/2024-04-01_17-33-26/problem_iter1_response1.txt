```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Initialize the indicator matrix
    indicators = np.zeros_like(distance_matrix)

    # Identify the longest edge in each row
    max_edges = np.max(distance_matrix, axis=1)

    # Calculate the average of all maximum edges
    avg_max = np.mean(max_edges)

    # Iterate over each edge in the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Identify the longest edge in the current row
            max_edge = max_edges[i]

            # If the current edge is longer than the average of all maximum edges,
            # set the indicator to a high value; otherwise, set it to a low value
            if distance_matrix[i, j] > avg_max:
                indicators[i, j] = 1
            else:
                indicators[i, j] = -1

    return indicators
```

