```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    # Calculate local neighborhood distances
    current_distances = distance_matrix[current_node, list(unvisited_nodes)]
    destination_distances = distance_matrix[destination_node, list(unvisited_nodes)]
    average_distances_to_unvisited = np.mean(distance_matrix[list(unvisited_nodes)][:, list(unvisited_nodes)], axis=1)
    std_dev_distances_to_unvisited = np.std(distance_matrix[list(unvisited_nodes)][:, list(unvisited_nodes)], axis=1)
    
    for node in unvisited_nodes:
        # Calculate scores for each unvisited node
        score = c1 * current_distances[node] - c2 * average_distances_to_unvisited[node] + c3 * std_dev_distances_to_unvisited[node] - c4 * destination_distances[node]
        scores[node] = score
    
    # Select next node with highest score
    next_node = max(scores, key=scores.get)
    
    return next_node
```
In the `select_next_node_v2` function, I have incorporated the following improvements:

1. Calculated the local neighborhood distances once instead of repeating the calculations inside the loop. This reduces computation time significantly.
2. Used numpy broadcasting to compute average and standard deviation of distances to unvisited nodes directly from the distance matrix, avoiding unnecessary conversions and list manipulations.
3. Changed the selection criterion to maximize the score instead of minimizing it. This reflects the objective of selecting the most promising next node based on the score.
