```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with further improved constructive heuristics."""
    
    # Define weights for the heuristic factors
    c1, c2, c3, c4 = 0.5, 0.25, 0.15, 0.1
    
    # Define lookahead threshold (adjust as per requirement)
    threshold = 0.8
    
    scores = {}  # Dictionary to store scores for each unvisited node
    
    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        
        # Calculate average and standard deviation of distances to unvisited nodes
        all_distances = distance_matrix[node][unvisited_node_list]
        unvisited_distances = np.concatenate([all_distances, [distance_matrix[node][current_node], distance_matrix[node][destination_node]]])
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)
        
        look_ahead_scores = []  # List to store lookahead scores
        
        for next_node in unvisited_node_list:
            next_all_distances = distance_matrix[next_node][unvisited_node_list]
            next_unvisited_distances = np.concatenate([next_all_distances, [distance_matrix[next_node][current_node], distance_matrix[next_node][destination_node]]])
            next_average_distance_to_unvisited = np.mean(next_unvisited_distances)
            next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances)
            
            # Calculate lookahead score for next node
            next_score = c1 * distance_matrix[current_node][next_node] - c2 * next_average_distance_to_unvisited + c3 * next_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
            look_ahead_scores.append(next_score)

        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0
        
        # Calculate final score for current node
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_score
        scores[node] = score

    # Select the node with the minimum score as the next node to visit
    next_node = min(scores, key=scores.get)
    return next_node
```
