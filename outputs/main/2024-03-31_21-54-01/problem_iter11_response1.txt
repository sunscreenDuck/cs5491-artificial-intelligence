```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1

    sub_matrix = distance_matrix[list(unvisited_nodes), :][:, list(unvisited_nodes)]
    sums = np.sum(sub_matrix, axis=1)
    counts = np.count_nonzero(sub_matrix, axis=1)
    average_distance_to_unvisited = sums / counts

    std_dev_distance_to_unvisited = np.std(sub_matrix, axis=1, ddof=0)

    scores = c1 * distance_matrix[current_node][list(unvisited_nodes)] \
             - c2 * average_distance_to_unvisited \
             + c3 * std_dev_distance_to_unvisited \
             - c4 * distance_matrix[destination_node][list(unvisited_nodes)]

    next_node = np.argmin(scores)
    return list(unvisited_nodes)[next_node]
```
In `select_next_node_v2`, I made the following optimizations:

1. Avoided unnecessary calculations and precomputed the sub-matrix containing distances between unvisited nodes.
2. Precomputed the sum and count of distances for each unvisited node to improve efficiency when calculating the average distance to unvisited nodes.
3. Utilized the `axis` parameter in numpy functions for efficient calculation of standard deviation.
4. Simplified the scoring calculation by using numpy operations to operate on arrays instead of nested loops.
5. Used `np.argmin` instead of `min` with a dictionary to find the index of the minimum score, and then retrieved the corresponding node from the set of unvisited nodes using indexing.
