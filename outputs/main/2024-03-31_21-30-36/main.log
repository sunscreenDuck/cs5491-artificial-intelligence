[2024-03-31 21:30:36,236][root][INFO] - Workspace: C:\Development\cs5491-artificial-intelligence\outputs\main\2024-03-31_21-30-36
[2024-03-31 21:30:36,237][root][INFO] - Project Root: C:\Development\cs5491-artificial-intelligence
[2024-03-31 21:30:36,237][root][INFO] - Using LLM: gpt-3.5-turbo-0613
[2024-03-31 21:30:36,237][root][INFO] - Using Algorithm: reevo
[2024-03-31 21:30:42,961][root][INFO] - Problem: tsp_constructive
[2024-03-31 21:30:42,962][root][INFO] - Problem description: Solving Traveling Salesman Problem (TSP) with constructive heuristics. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
[2024-03-31 21:30:42,962][root][INFO] - Function name: select_next_node
[2024-03-31 21:30:42,968][root][INFO] - Evaluating seed function...
[2024-03-31 21:30:42,969][root][INFO] - Seed function code: 
import numpy as np
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
[2024-03-31 21:30:42,969][root][INFO] - Iteration 0: Running Code 0
[2024-03-31 21:30:44,181][root][INFO] - Iteration 0: Code Run 0 successful!
[2024-03-31 21:30:50,490][root][INFO] - Iteration 0, response_id 0: Objective value: 6.273092009780198
[2024-03-31 21:30:50,490][root][INFO] - Iteration 0: Elitist: 6.273092009780198
[2024-03-31 21:30:50,490][root][INFO] - Iteration 0 finished...
[2024-03-31 21:30:50,491][root][INFO] - Best obj: 6.273092009780198, Best Code Path: problem_iter0_code0.py
[2024-03-31 21:30:50,491][root][INFO] - Function Evals: 1
[2024-03-31 21:30:50,491][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
Write a select_next_node function for Solving Traveling Salesman Problem (TSP) with constructive heuristics. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The select_next_node function takes as input the current node, the destination_node, a set of unvisited nodes, and a distance matrix, and returns the next node to visit.


def select_next_node_v1(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node


Improve `select_next_node_v1` to give `select_next_node_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

- Try look-ahead mechanisms.
[2024-03-31 21:31:03,094][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:31:03,341][root][INFO] - Iteration 1: Running Code 0
[2024-03-31 21:31:04,721][root][INFO] - Iteration 1: Code Run 0 successful!
[2024-03-31 21:31:04,722][root][INFO] - Iteration 1: Running Code 1
[2024-03-31 21:31:06,126][root][INFO] - Iteration 1: Code Run 1 successful!
[2024-03-31 21:31:06,127][root][INFO] - Iteration 1: Running Code 2
[2024-03-31 21:31:07,761][root][INFO] - Iteration 1: Code Run 2 successful!
[2024-03-31 21:31:07,761][root][INFO] - Iteration 1: Running Code 3
[2024-03-31 21:31:09,721][root][INFO] - Iteration 1: Code Run 3 successful!
[2024-03-31 21:31:09,723][root][INFO] - Iteration 1: Running Code 4
[2024-03-31 21:31:11,680][root][INFO] - Iteration 1: Code Run 4 successful!
[2024-03-31 21:31:11,681][root][INFO] - Iteration 1: Running Code 5
[2024-03-31 21:31:13,907][root][INFO] - Iteration 1: Code Run 5 successful!
[2024-03-31 21:31:13,907][root][INFO] - Iteration 1: Running Code 6
[2024-03-31 21:31:16,615][root][INFO] - Iteration 1: Code Run 6 successful!
[2024-03-31 21:31:16,615][root][INFO] - Iteration 1: Running Code 7
[2024-03-31 21:31:19,500][root][INFO] - Iteration 1: Code Run 7 successful!
[2024-03-31 21:31:19,501][root][INFO] - Iteration 1: Running Code 8
[2024-03-31 21:31:22,996][root][INFO] - Iteration 1: Code Run 8 successful!
[2024-03-31 21:31:22,997][root][INFO] - Iteration 1: Running Code 9
[2024-03-31 21:31:26,863][root][INFO] - Iteration 1: Code Run 9 successful!
[2024-03-31 21:31:26,884][root][INFO] - Iteration 1, response_id 0: Objective value: 26.422337388494952
[2024-03-31 21:31:46,893][root][INFO] - Error for response_id 1: Command '['python', '-u', 'C:\\Development\\cs5491-artificial-intelligence/problems/tsp_constructive/eval.py', '50', 'C:\\Development\\cs5491-artificial-intelligence', 'train']' timed out after 20.0 seconds
[2024-03-31 21:32:06,908][root][INFO] - Error for response_id 2: Command '['python', '-u', 'C:\\Development\\cs5491-artificial-intelligence/problems/tsp_constructive/eval.py', '50', 'C:\\Development\\cs5491-artificial-intelligence', 'train']' timed out after 20.0 seconds
[2024-03-31 21:32:06,928][root][INFO] - Iteration 1, response_id 3: Objective value: inf
[2024-03-31 21:32:06,976][root][INFO] - Iteration 1, response_id 4: Objective value: 8.714977131957673
[2024-03-31 21:32:06,984][root][INFO] - Iteration 1, response_id 5: Objective value: inf
[2024-03-31 21:32:06,993][root][INFO] - Iteration 1, response_id 6: Objective value: inf
[2024-03-31 21:32:21,282][root][INFO] - Iteration 1, response_id 7: Objective value: 6.580712164959934
[2024-03-31 21:32:41,289][root][INFO] - Error for response_id 8: Command '['python', '-u', 'C:\\Development\\cs5491-artificial-intelligence/problems/tsp_constructive/eval.py', '50', 'C:\\Development\\cs5491-artificial-intelligence', 'train']' timed out after 20.0 seconds
[2024-03-31 21:32:41,294][root][INFO] - Iteration 1, response_id 9: Objective value: inf
[2024-03-31 21:32:41,295][root][INFO] - Iteration 1 finished...
[2024-03-31 21:32:41,295][root][INFO] - Best obj: 6.273092009780198, Best Code Path: problem_iter0_code0.py
[2024-03-31 21:32:41,296][root][INFO] - Function Evals: 11
[2024-03-31 21:36:31,656][root][INFO] - Short-term Reflection Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to give hints to design better heuristics.

User Prompt: 
Below are two select_next_node functions for Solving Traveling Salesman Problem (TSP) with constructive heuristics. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The select_next_node function takes as input the current node, the destination_node, a set of unvisited nodes, and a distance matrix, and returns the next node to visit.


You are provided with two code versions below, where the second version performs better than the first one.

[Worse code]

    """Select the next node to visit from the unvisited nodes using look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.8
    lookahead_steps = 3
    
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        lookahead_scores = []
        for step in range(1, lookahead_steps + 1):
            lookahead_node = min(unvisited_nodes, key=lambda x: distance_matrix[node][x])
            lookahead_unvisited = unvisited_nodes.copy()
            lookahead_unvisited.remove(lookahead_node)
            
            lookahead_distances = [distance_matrix[lookahead_node][i] for i in lookahead_unvisited]
            lookahead_average_distance = np.mean(lookahead_distances)
            lookahead_std_dev_distance = np.std(lookahead_distances)
            
            lookahead_score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited \
                - c4 * distance_matrix[destination_node][node] + c5 * distance_matrix[node][lookahead_node] - c2 * lookahead_average_distance \
                + c3 * lookahead_std_dev_distance
            lookahead_scores.append(lookahead_score)
            
        score = np.mean(lookahead_scores)
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node

[Better code]
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node

You respond with some hints for designing better heuristics, based on the two code versions and using less than 20 words.
[2024-03-31 21:36:52,557][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:52,560][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:52,609][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:52,631][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:52,637][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:52,862][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:53,592][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:53,781][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:54,193][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:36:54,817][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:14,663][root][INFO] - Crossover Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
Write a select_next_node function for Solving Traveling Salesman Problem (TSP) with constructive heuristics. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The select_next_node function takes as input the current node, the destination_node, a set of unvisited nodes, and a distance matrix, and returns the next node to visit.



[Worse code]
def select_next_node_v0(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:

    """Select the next node to visit from the unvisited nodes using look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.8
    lookahead_steps = 3
    
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        lookahead_scores = []
        for step in range(1, lookahead_steps + 1):
            lookahead_node = min(unvisited_nodes, key=lambda x: distance_matrix[node][x])
            lookahead_unvisited = unvisited_nodes.copy()
            lookahead_unvisited.remove(lookahead_node)
            
            lookahead_distances = [distance_matrix[lookahead_node][i] for i in lookahead_unvisited]
            lookahead_average_distance = np.mean(lookahead_distances)
            lookahead_std_dev_distance = np.std(lookahead_distances)
            
            lookahead_score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited \
                - c4 * distance_matrix[destination_node][node] + c5 * distance_matrix[node][lookahead_node] - c2 * lookahead_average_distance \
                + c3 * lookahead_std_dev_distance
            lookahead_scores.append(lookahead_score)
            
        score = np.mean(lookahead_scores)
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node

[Better code]
def select_next_node_v1(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node

[Reflection]
1. Reduce complexity by removing unnecessary variables and calculations.
2. Simplify the objective function by removing irrelevant terms.
3. Focus on the main components that directly impact the decision-making process.

[Improved code]
Please write an improved function `select_next_node_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```.
[2024-03-31 21:37:18,665][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:19,178][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:19,383][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:20,511][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:20,815][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:21,124][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:21,430][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:23,275][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:23,992][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:27,060][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:37:31,944][root][INFO] - Iteration 2: Running Code 0
[2024-03-31 21:37:33,214][root][INFO] - Iteration 2: Code Run 0 successful!
[2024-03-31 21:37:33,214][root][INFO] - Iteration 2: Running Code 1
[2024-03-31 21:37:34,597][root][INFO] - Iteration 2: Code Run 1 successful!
[2024-03-31 21:37:34,598][root][INFO] - Iteration 2: Running Code 2
[2024-03-31 21:37:36,055][root][INFO] - Iteration 2: Code Run 2 successful!
[2024-03-31 21:37:36,056][root][INFO] - Iteration 2: Running Code 3
[2024-03-31 21:37:37,863][root][INFO] - Iteration 2: Code Run 3 successful!
[2024-03-31 21:37:37,864][root][INFO] - Iteration 2: Running Code 4
[2024-03-31 21:37:39,845][root][INFO] - Iteration 2: Code Run 4 successful!
[2024-03-31 21:37:39,845][root][INFO] - Iteration 2: Running Code 5
[2024-03-31 21:37:41,851][root][INFO] - Iteration 2: Code Run 5 successful!
[2024-03-31 21:37:41,852][root][INFO] - Iteration 2: Running Code 6
[2024-03-31 21:37:44,288][root][INFO] - Iteration 2: Code Run 6 successful!
[2024-03-31 21:37:44,289][root][INFO] - Iteration 2: Running Code 7
[2024-03-31 21:37:46,502][root][INFO] - Iteration 2: Code Run 7 successful!
[2024-03-31 21:37:46,503][root][INFO] - Iteration 2: Running Code 8
[2024-03-31 21:37:48,718][root][INFO] - Iteration 2: Code Run 8 successful!
[2024-03-31 21:37:48,719][root][INFO] - Iteration 2: Running Code 9
[2024-03-31 21:37:50,946][root][INFO] - Iteration 2: Code Run 9 successful!
[2024-03-31 21:37:50,965][root][INFO] - Iteration 2, response_id 0: Objective value: 6.437252141061209
[2024-03-31 21:37:50,971][root][INFO] - Iteration 2, response_id 1: Objective value: 6.273092009780198
[2024-03-31 21:38:03,312][root][INFO] - Iteration 2, response_id 2: Objective value: 6.904497319595152
[2024-03-31 21:38:23,318][root][INFO] - Error for response_id 3: Command '['python', '-u', 'C:\\Development\\cs5491-artificial-intelligence/problems/tsp_constructive/eval.py', '50', 'C:\\Development\\cs5491-artificial-intelligence', 'train']' timed out after 20.0 seconds
[2024-03-31 21:38:23,332][root][INFO] - Iteration 2, response_id 4: Objective value: inf
[2024-03-31 21:38:23,353][root][INFO] - Iteration 2, response_id 5: Objective value: inf
[2024-03-31 21:38:23,355][root][INFO] - Iteration 2, response_id 6: Objective value: 6.273092009780198
[2024-03-31 21:38:43,369][root][INFO] - Error for response_id 7: Command '['python', '-u', 'C:\\Development\\cs5491-artificial-intelligence/problems/tsp_constructive/eval.py', '50', 'C:\\Development\\cs5491-artificial-intelligence', 'train']' timed out after 20.0 seconds
[2024-03-31 21:38:43,373][root][INFO] - Iteration 2, response_id 8: Objective value: 6.580712164959934
[2024-03-31 21:38:43,387][root][INFO] - Iteration 2, response_id 9: Objective value: inf
[2024-03-31 21:38:55,409][root][INFO] - Iteration 2 finished...
[2024-03-31 21:38:55,409][root][INFO] - Best obj: 6.273092009780198, Best Code Path: problem_iter0_code0.py
[2024-03-31 21:38:55,410][root][INFO] - Function Evals: 21
[2024-03-31 21:38:56,208][root][INFO] - Long-term Reflection Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to give hints to design better heuristics.

User Prompt: 
Below is your prior long-term reflection on designing heuristics for Solving Traveling Salesman Problem (TSP) with constructive heuristics. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
- Try look-ahead mechanisms.

Below are some newly gained insights.
1. Reduce complexity by removing unnecessary variables and calculations.
2. Simplify the objective function by removing irrelevant terms.
3. Focus on the main components that directly impact the decision-making process.
1. Consider removing the look-ahead mechanism as it may not always improve the solution.
2. Simplify the score calculation and directly evaluate all unvisited nodes.
1. Consider incorporating a look-ahead mechanism to improve the quality of the selected next node.
2. Adjust the weights of the scoring components based on problem characteristics and experimentation.
1. Consider incorporating more factors into the scoring function for better decision making.
2. Utilize a look-ahead mechanism to consider the impact of potential future moves.
3. Gather statistics from multiple future steps and consider their average for better decision making.
1. Consider removing the look-ahead mechanism if the improvement in performance is not significant.
2. Simplify the scoring mechanism by removing unnecessary variables and terms.
3. Focus on improving the calculation of the average and standard deviation.
- Consider incorporating more lookahead steps to improve the accuracy of the heuristic.
- Fine-tune the weights for the different components of the scoring function.
- Explore different mechanisms to select the lookahead node, e.g., using a random selection strategy.
1. Simplify the code by avoiding unnecessary nested loops.
2. Consider all nodes instead of a limited set for better optimization results.
1. Incorporate multiple lookahead steps for better performance.
2. Consider additional factors such as average and standard deviation of distances.
3. Adjust weight parameters to balance the importance of different objective functions.
- Consider adding more parameters or metrics to the scoring function. 
- Implement multiple lookahead steps to better evaluate future node selections. 
- Use statistics (mean, standard deviation) to evaluate distances within subproblems.
1. Reduce the number of parameters and variables to simplify the heuristic.
2. Remove the look-ahead mechanism and threshold to improve the performance.

Write constructive hints for designing better heuristics, based on prior reflections and new insights and using less than 50 words.
[2024-03-31 21:38:59,320][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:39:00,447][root][INFO] - Mutation Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
Write a select_next_node function for Solving Traveling Salesman Problem (TSP) with constructive heuristics. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The select_next_node function takes as input the current node, the destination_node, a set of unvisited nodes, and a distance matrix, and returns the next node to visit.



[Prior reflection]
1. Strike a balance between complexity and effectiveness by simplifying the objective function and focusing on essential components.
2. Consider incorporating a limited number of lookahead steps to improve decision-making without adding unnecessary complexity.
3. Regularly fine-tune weight parameters and evaluate different mechanisms to select lookahead nodes for optimal performance.- Try look-ahead mechanisms.

[Code]
def select_next_node_v1(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node

[Improved code]
Please write a mutated function `select_next_node_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```.
[2024-03-31 21:39:07,203][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:39:07,237][root][INFO] - Iteration 3: Running Code 0
[2024-03-31 21:39:08,404][root][INFO] - Iteration 3: Code Run 0 successful!
[2024-03-31 21:39:08,404][root][INFO] - Iteration 3: Running Code 1
[2024-03-31 21:39:09,584][root][INFO] - Iteration 3: Code Run 1 successful!
[2024-03-31 21:39:09,585][root][INFO] - Iteration 3: Running Code 2
[2024-03-31 21:39:10,908][root][INFO] - Iteration 3: Code Run 2 successful!
[2024-03-31 21:39:10,909][root][INFO] - Iteration 3: Running Code 3
[2024-03-31 21:39:12,362][root][INFO] - Iteration 3: Code Run 3 successful!
[2024-03-31 21:39:12,363][root][INFO] - Iteration 3: Running Code 4
[2024-03-31 21:39:13,881][root][INFO] - Iteration 3: Code Run 4 successful!
[2024-03-31 21:39:13,894][root][INFO] - Iteration 3, response_id 0: Objective value: inf
[2024-03-31 21:39:16,302][root][INFO] - Iteration 3, response_id 1: Objective value: 7.103306739042188
[2024-03-31 21:39:16,312][root][INFO] - Iteration 3, response_id 2: Objective value: inf
[2024-03-31 21:39:16,321][root][INFO] - Iteration 3, response_id 3: Objective value: inf
[2024-03-31 21:39:36,328][root][INFO] - Error for response_id 4: Command '['python', '-u', 'C:\\Development\\cs5491-artificial-intelligence/problems/tsp_constructive/eval.py', '50', 'C:\\Development\\cs5491-artificial-intelligence', 'train']' timed out after 20.0 seconds
[2024-03-31 21:39:36,329][root][INFO] - Iteration 3 finished...
[2024-03-31 21:39:36,329][root][INFO] - Best obj: 6.273092009780198, Best Code Path: problem_iter0_code0.py
[2024-03-31 21:39:36,330][root][INFO] - Function Evals: 26
[2024-03-31 21:43:25,790][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:26,257][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:26,319][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:26,368][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:26,431][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:26,868][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:27,013][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:27,179][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:27,483][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:29,735][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:32,910][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:32,913][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:32,969][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:34,035][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:34,956][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:35,778][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:36,289][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:36,311][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:37,723][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:38,141][httpx][INFO] - HTTP Request: POST https://api.chatanywhere.tech/chat/completions "HTTP/1.1 200 OK"
[2024-03-31 21:43:38,171][root][INFO] - Iteration 4: Running Code 0
[2024-03-31 21:43:39,629][root][INFO] - Iteration 4: Code Run 0 successful!
[2024-03-31 21:43:39,630][root][INFO] - Iteration 4: Running Code 1
[2024-03-31 21:43:40,985][root][INFO] - Iteration 4: Code Run 1 successful!
[2024-03-31 21:43:40,985][root][INFO] - Iteration 4: Running Code 2
[2024-03-31 21:43:42,650][root][INFO] - Iteration 4: Code Run 2 successful!
[2024-03-31 21:43:42,650][root][INFO] - Iteration 4: Running Code 3
[2024-03-31 21:43:44,553][root][INFO] - Iteration 4: Code Run 3 successful!
[2024-03-31 21:43:44,553][root][INFO] - Iteration 4: Running Code 4
[2024-03-31 21:43:46,570][root][INFO] - Iteration 4: Code Run 4 successful!
[2024-03-31 21:43:46,570][root][INFO] - Iteration 4: Running Code 5
