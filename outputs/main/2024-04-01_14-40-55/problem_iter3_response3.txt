```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    unvisited_distances = distance_matrix[current_node][unvisited_nodes]
    average_distance_to_unvisited = np.mean(unvisited_distances)
    std_dev_distance_to_unvisited = np.std(unvisited_distances)
    destination_distances = distance_matrix[destination_node][unvisited_nodes]
    for i, node in enumerate(unvisited_nodes):
        score = c1 * unvisited_distances[i] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * destination_distances[i]
        scores[node] = score      
    next_node = min(scores, key=scores.get)
    return next_node
```
In this version `select_next_node_v2`, we calculate the `unvisited_distances` and `destination_distances` only once, outside of the loop. This reduces unnecessary calculations in each iteration of the loop and improves the efficiency. The `for` loop now only iterates over the `unvisited_nodes` once to calculate the scores.
