```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    weights = np.array([0.4, 0.3, 0.2, 0.1])
    
    scores = {}
    for node in unvisited_nodes:
        distances_to_unvisited = distance_matrix[node][list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        future_distances = distance_matrix[destination_node][list(unvisited_nodes - {node})]
        future_impact = np.mean(future_distances)
        
        score = weights[0] * distance_matrix[current_node][node] - weights[1] * average_distance_to_unvisited + weights[2] * std_dev_distance_to_unvisited - weights[3] * future_impact
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    
    return next_node
```
In the improved code, a few changes were made:
- The weights are stored in a NumPy array for simplicity and ease of parameterization.
- The distances to unvisited nodes are obtained using list slicing instead of iterating over the nodes and checking conditions.
- The future distances are calculated in a similar manner using list slicing.
- The future impact is calculated by taking the mean of the future distances.
- The scoring function is simplified and parameterized using the weights array.
- The code is wrapped in a Python code block.
