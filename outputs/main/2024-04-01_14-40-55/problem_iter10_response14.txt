```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    
    threshold = 0.5
    exploration_probabilities = [0.4, 0.2, 0.2, 0.1, 0.1]
    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        
        unvisited_distances = distance_matrix[node][unvisited_node_list]
        unvisited_distances = np.append(unvisited_distances, [distance_matrix[node][current_node], distance_matrix[node][destination_node]])
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)

        look_ahead_scores = []
        for next_node in unvisited_node_list:
            next_unvisited_distances = np.append(distance_matrix[next_node][unvisited_node_list], [distance_matrix[next_node][current_node], distance_matrix[next_node][destination_node]])
            next_average_distance_to_unvisited = np.mean(next_unvisited_distances)
            next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances)

            next_score = exploration_probabilities[0] * distance_matrix[current_node][next_node] \
                         - exploration_probabilities[1] * next_average_distance_to_unvisited \
                         + exploration_probabilities[2] * next_std_dev_distance_to_unvisited \
                         - exploration_probabilities[3] * distance_matrix[destination_node][next_node] \
                         + exploration_probabilities[4] * len(unvisited_nodes)

            look_ahead_scores.append(next_score)

        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0
        score = exploration_probabilities[0] * distance_matrix[current_node][node] \
                - exploration_probabilities[1] * average_distance_to_unvisited \
                + exploration_probabilities[2] * std_dev_distance_to_unvisited \
                - exploration_probabilities[3] * distance_matrix[destination_node][node] \
                + threshold * lookahead_score

        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
In this improved version `select_next_node_v2`, I introduced exploration probabilities to add more diversity to the exploration strategy. The exploration probabilities determine the relative influence of different components of the score calculation. By adjusting the exploration probabilities, you can control how much emphasis is placed on different factors when selecting the next node. The exploration probabilities can be adjusted according to the problem domain and the specific characteristics of the input data.
