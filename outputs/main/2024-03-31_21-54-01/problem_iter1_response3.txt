```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    lookahead_factor = 0.3
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate score based on current node
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        # Look ahead and calculate score based on next node
        unvisited_nodes_copy = unvisited_nodes.copy()
        unvisited_nodes_copy.remove(node)
        next_node_scores = []
        
        for next_node in unvisited_nodes_copy:
            all_distances_next = [distance_matrix[next_node][i] for i in unvisited_nodes_copy if i != next_node]
            average_distance_to_unvisited_next = np.mean(all_distances_next)
            std_dev_distance_to_unvisited_next = np.std(all_distances_next)
            
            next_node_score = c1 * distance_matrix[node][next_node] - c2 * average_distance_to_unvisited_next + c3 * std_dev_distance_to_unvisited_next - c4 * distance_matrix[destination_node][next_node]
            next_node_scores.append(next_node_score)
            
        lookahead_score = lookahead_factor * min(next_node_scores) if next_node_scores else 0
        total_score = score + lookahead_score
        
        scores[node] = total_score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
Here, I have introduced a look-ahead mechanism to `select_next_node_v2` where we calculate the score for each possible next node by considering its impact on the following node as well. By doing this, we can take into account potential future optimizations instead of only considering the current node. The lookahead factor determines the weight of the look-ahead mechanism in the overall score calculation.
