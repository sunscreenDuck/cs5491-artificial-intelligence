```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    # Calculate the combined factors
    promising_factors = []
    for i in range(n):
        for j in range(n):
            if i != j:
                promising_factors.append(1 / distance_matrix[i, j])
    
    # Calculate the threshold for sparsifying the matrix
    threshold = np.percentile(promising_factors, 25)
    
    # Update the heuristics matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                combined_factor = 1 / distance_matrix[i, j]
                if combined_factor >= threshold:
                    heuristics_matrix[i, j] = combined_factor
    
    return heuristics_matrix
    
distance_matrix = np.array([[0, 10, 15, 20],
                            [10, 0, 35, 25],
                            [15, 35, 0, 30],
                            [20, 25, 30, 0]])

heuristics = heuristics_v2(distance_matrix)
print(heuristics)
```
This code defines the `heuristics_v2` function which takes a distance matrix as input and returns a heuristics matrix. The heuristics matrix is calculated by combining various factors and sparsifying the matrix by setting unpromising elements to zero.

The function first calculates the combined factors by taking the reciprocals of the distances. Then, it determines the threshold by taking the 25th percentile of the combined factors. Finally, it updates the heuristics matrix by comparing the combined factors to the threshold and setting the non-promising elements to zero.

The code also includes an example distance matrix and prints the resulting heuristics matrix.
