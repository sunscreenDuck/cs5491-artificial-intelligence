```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Normalize the distance matrix while retaining meaningful distances
    min_distance = np.min(distance_matrix[np.nonzero(distance_matrix)])
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)

    # Calculate statistical properties of the distance matrix
    average_distance = np.mean(normalized_matrix[np.nonzero(normalized_matrix)])
    distance_std = np.std(normalized_matrix[np.nonzero(normalized_matrix)])
    pairwise_diff = np.mean(np.abs(np.diff(normalized_matrix[np.nonzero(normalized_matrix)])))

    # Calculate the average distance to closest neighbors
    min_distances = np.min(normalized_matrix, axis=1)
    avg_min_distance = np.mean(min_distances)

    for i in range(n):
        for j in range(n):
            # Calculate the heuristics value as a combination of factors
            heuristic_value = (1 / normalized_matrix[i, j]) + \
                              (average_distance / (normalized_matrix[i, j] ** 2)) + \
                              (normalized_matrix[i, j] / max_distance) + \
                              ((avg_min_distance - normalized_matrix[i, j]) / avg_min_distance) + \
                              ((normalized_matrix[i, j] - min_distances[i]) / pairwise_diff)

            # Set unpromising elements to zero
            if heuristic_value < 0.25:
                heuristic_value = 0

            heuristics[i, j] = heuristic_value

    return heuristics
```
