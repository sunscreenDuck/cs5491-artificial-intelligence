```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}

    current_distances = distance_matrix[current_node]
    dest_distances = distance_matrix[destination_node]
    node_distances = distance_matrix[list(unvisited_nodes)]

    average_distance_to_unvisited = np.mean(node_distances, axis=1)
    std_dev_distance_to_unvisited = np.std(node_distances, axis=1)
    score = c1 * current_distances[list(unvisited_nodes)] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * dest_distances[list(unvisited_nodes)]

    scores = dict(zip(list(unvisited_nodes), score))

    next_node = min(scores, key=scores.get)
    return next_node
```
In this mutated function `select_next_node_v2`, I have removed the redundant calculations within the for loop and used the numpy operations (mean and std) for more efficient computations. I have also adjusted the code structure for better readability and clarity.
