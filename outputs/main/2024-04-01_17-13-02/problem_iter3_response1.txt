```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance
    avg_distance = np.mean(distance_matrix)

    # Calculate the standard deviation of distance matrix
    std_distance = np.std(distance_matrix)

    # Calculate the maximum distance value in the distance matrix
    max_distance = np.max(distance_matrix)

    # Calculate the minimum distance value in the distance matrix
    min_distance = np.min(distance_matrix)

    # Initialize the new distance matrix
    new_distance_matrix = np.copy(distance_matrix)

    # Update the new distance matrix based on the heuristics
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            if distance_matrix[i][j] > avg_distance:
                new_distance_matrix[i][j] *= 2
            elif distance_matrix[i][j] < avg_distance / 2:
                new_distance_matrix[i][j] /= 2
            if distance_matrix[i][j] == max_distance:
                new_distance_matrix[i][j] *= 3
            elif distance_matrix[i][j] == min_distance:
                new_distance_matrix[i][j] *= 0.5
            elif distance_matrix[i][j] > avg_distance + std_distance:
                new_distance_matrix[i][j] *= 1.5
            elif distance_matrix[i][j] < avg_distance - std_distance:
                new_distance_matrix[i][j] /= 1.5

    return new_distance_matrix
```

