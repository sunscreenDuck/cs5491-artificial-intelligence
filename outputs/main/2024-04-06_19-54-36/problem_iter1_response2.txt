```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the inverse of the distance matrix
    inverse_distance_matrix = np.zeros_like(distance_matrix)
    mask = distance_matrix > 0
    inverse_distance_matrix[mask] = 1 / distance_matrix[mask]

    # Compute the number of neighbors for each node
    num_neighbors = np.sum(mask, axis=1)

    # Compute the total distance for each node
    total_distance = np.sum(distance_matrix, axis=1)

    # Compute the average distance for each node
    average_distance = total_distance / num_neighbors

    # Compute the edge importance score based on average distance and number of neighbors
    edge_importance = average_distance / num_neighbors

    # Sparsify the matrix by setting unpromising elements to zero
    sparsified_matrix = np.where(edge_importance > 0, distance_matrix, 0)

    return sparsified_matrix
```

