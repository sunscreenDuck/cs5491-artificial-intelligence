```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)

    # Normalize the distance matrix by dividing each element by the maximum distance
    normalized_distance_matrix = distance_matrix / np.max(distance_matrix)
    
    # Initialize the penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over the distance matrix
    for i in range(num_nodes):
        for j in range(i+1, num_nodes): # Only iterate over the upper triangular portion of the matrix
            # Normalize the edge distance
            normalized_edge_distance = normalized_distance_matrix[i, j]
            
            # Compute the penalty value for each edge
            penalty = normalized_edge_distance / (node_distances[i] + node_distances[j])
            
            # Set the penalty value in the penalty matrix
            penalty_matrix[i, j] = penalty
            penalty_matrix[j, i] = penalty # Assign the same penalty value for the symmetric edge
            
    return penalty_matrix
```
