```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)

    # Calculate the average distance
    average_distance = np.mean(normalized_matrix[np.nonzero(normalized_matrix)])

    for i in range(n):
        for j in range(n):
            # Calculate the heuristics value as a combination of factors
            heuristic_value = (1 / normalized_matrix[i, j]) + \
                              (average_distance / (normalized_matrix[i, j] ** 2))

            # Set unpromising elements to zero
            if heuristic_value < 0.5:
                heuristic_value = 0

            heuristics[i, j] = heuristic_value

    return heuristics
```
In this mutated function `heuristics_v2`, I simplified the heuristics calculation by removing factors and assigning appropriate weights. I also adjusted the threshold for setting unpromising elements to zero for sparsifying the matrix, which can potentially improve performance in solving the Traveling Salesman Problem (TSP).
