```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes using enhanced heuristics."""
    
    weights = {
        'distance_to_current': 0.4,
        'average_distance_to_unvisited': 0.3,
        'std_dev_distance_to_unvisited': 0.2,
        'distance_to_destination': 0.1,
        'distance_to_start': 0.1
    }
    
    scores = {}
    
    distances = distance_matrix[list(unvisited_nodes)].T  # Distance matrix for unvisited nodes
    
    # Calculate the average and standard deviation of distances to other unvisited nodes
    average_distances_to_unvisited = np.mean(distances, axis=1)
    std_dev_distances_to_unvisited = np.std(distances, axis=1)
    
    for node in unvisited_nodes:
        average_distance_to_unvisited = average_distances_to_unvisited[node]
        std_dev_distance_to_unvisited = std_dev_distances_to_unvisited[node]
        
        # Calculate the distance to destination node as a combination of distances to current and destination nodes
        distance_to_destination = distance_matrix[current_node][node] + distance_matrix[destination_node][node]
        
        # Calculate the distance to the start node as a combination of current node distance and distance to destination node
        distance_to_start = distance_matrix[node][current_node] + distance_matrix[node][destination_node]
        
        # Calculate the score as a combination of different factors with weightings
        score = weights['distance_to_current'] * distance_matrix[current_node][node] \
                - weights['average_distance_to_unvisited'] * average_distance_to_unvisited \
                + weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited \
                - weights['distance_to_destination'] * distance_to_destination \
                - weights['distance_to_start'] * distance_to_start
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
