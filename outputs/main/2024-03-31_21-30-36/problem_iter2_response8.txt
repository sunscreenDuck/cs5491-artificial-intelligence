```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes using look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.8
    lookahead_steps = 3
    
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        lookahead_scores = []
        for step in range(1, lookahead_steps + 1):
            lookahead_node = min(unvisited_nodes, key=lambda x: distance_matrix[node][x])
            lookahead_unvisited = unvisited_nodes.copy()
            lookahead_unvisited.remove(lookahead_node)
            
            lookahead_distances = [distance_matrix[lookahead_node][i] for i in lookahead_unvisited]
            lookahead_average_distance = np.mean(lookahead_distances)
            lookahead_std_dev_distance = np.std(lookahead_distances)
            
            lookahead_score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited \
                - c4 * distance_matrix[destination_node][node] + c5 * distance_matrix[node][lookahead_node] - c2 * lookahead_average_distance \
                + c3 * lookahead_std_dev_distance
            lookahead_scores.append(lookahead_score)
            
        score = np.mean(lookahead_scores)
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
