```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    
    # Define weights for scoring
    weights = {
        'current_distance': 0.4,
        'average_distance_to_unvisited': 0.3,
        'std_dev_distance_to_unvisited': 0.2,
        'destination_distance': 0.1,
        'lookahead_threshold': 0.7
    }
    
    # Initialize scores dictionary
    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        node_distances = distance_matrix[node]
        
        # Calculate average and standard deviation of distances
        average_distance_to_unvisited = np.mean(node_distances[unvisited_node_list])
        std_dev_distance_to_unvisited = np.std(node_distances[unvisited_node_list])
        
        look_ahead_scores = []
        for next_node in unvisited_node_list:
            next_node_distances = distance_matrix[next_node]
            
            # Calculate average and standard deviation for next node
            next_average_distance_to_unvisited = np.mean(next_node_distances[unvisited_node_list])
            next_std_dev_distance_to_unvisited = np.std(next_node_distances[unvisited_node_list])

            # Calculate lookahead score for next node
            lookahead_score = weights['current_distance'] * next_node_distances[current_node] \
                              - weights['average_distance_to_unvisited'] * next_average_distance_to_unvisited \
                              + weights['std_dev_distance_to_unvisited'] * next_std_dev_distance_to_unvisited \
                              - weights['destination_distance'] * next_node_distances[destination_node]
            look_ahead_scores.append(lookahead_score)

        # Calculate score for current node
        score = weights['current_distance'] * node_distances[current_node] \
                - weights['average_distance_to_unvisited'] * average_distance_to_unvisited \
                + weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited \
                - weights['destination_distance'] * node_distances[destination_node] \
                + weights['lookahead_threshold'] * np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0
        
        scores[node] = score

    # Return the node with minimum score
    next_node = min(scores, key=scores.get)
    return next_node
```

