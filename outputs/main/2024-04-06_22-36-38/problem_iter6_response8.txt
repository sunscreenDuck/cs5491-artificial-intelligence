```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)

    # Calculate the inverse of the normalized matrix
    inverse_matrix = 1 / normalized_matrix

    # Calculate the mean and standard deviation of the inverse matrix
    mean = np.mean(inverse_matrix)
    std_dev = np.std(inverse_matrix)

    # Calculate the normalized inverse matrix by subtracting the mean and dividing by the standard deviation
    normalized_inverse_matrix = (inverse_matrix - mean) / std_dev

    # Experiment with different normalization techniques and thresholding strategies to improve performance

    # Calculate the maximum value of the normalized inverse matrix
    max_value = np.max(normalized_inverse_matrix)

    # Calculate the mean of the normalized inverse matrix
    mean_value = np.mean(normalized_inverse_matrix)

    # Calculate the threshold based on the mean and maximum values
    threshold = (mean_value + max_value) / 2

    # Apply sparsification by setting unpromising elements to zero
    sparsified_matrix = normalized_inverse_matrix.copy()
    sparsified_matrix[sparsified_matrix < threshold] = 0

    return sparsified_matrix
```
