```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]

    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the average distance for each node
    node_avg_distance = node_distances / (num_nodes - 1)
    
    # Check if node_avg_distance contains any zeros
    if np.any(node_avg_distance == 0):
        raise ValueError("Zero division error! Please ensure that the distance matrix does not contain any self-loops.")
    
    # Compute penalty matrix
    penalty_matrix = distance_matrix / (node_avg_distance[:, np.newaxis] + node_avg_distance[np.newaxis, :])

    return penalty_matrix
```
