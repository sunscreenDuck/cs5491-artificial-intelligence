```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    
    # Define the weights for different components in the scoring function
    weights = {
        'distance': 0.4,
        'average_distance_to_unvisited': 0.3,
        'std_dev_distance_to_unvisited': 0.2,
        'destination_distance': 0.1,
        'lookahead': 0.7
    }
    
    scores = {}
    
    for node in unvisited_nodes:
        # Calculate average and standard deviation of distances for unvisited nodes excluding the current and destination nodes
        unvisited_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)
        
        look_aheads = []
        for next_node in unvisited_nodes:
            if next_node != node:
                next_unvisited_distances = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
                next_average_distance_to_unvisited = np.mean(next_unvisited_distances)
                next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances)

                # Calculate the score for the next node using the weights and distance measures
                next_score = (
                    weights['distance'] * distance_matrix[current_node][next_node] -
                    weights['average_distance_to_unvisited'] * next_average_distance_to_unvisited +
                    weights['std_dev_distance_to_unvisited'] * next_std_dev_distance_to_unvisited -
                    weights['destination_distance'] * distance_matrix[destination_node][next_node]
                )
                look_aheads.append(next_score)
        
        # Calculate the average lookahead score if lookaheads are available
        lookahead_score = np.mean(look_aheads) if len(look_aheads) > 0 else 0
        
        # Calculate the final score for the node using the weights and scores from different measures
        score = (
            weights['distance'] * distance_matrix[current_node][node] -
            weights['average_distance_to_unvisited'] * average_distance_to_unvisited +
            weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited -
            weights['destination_distance'] * distance_matrix[destination_node][node] +
            weights['lookahead'] * lookahead_score
        )
        scores[node] = score
    
    # Select the next node with the minimum score
    next_node = min(scores, key=scores.get)
    return next_node
```
