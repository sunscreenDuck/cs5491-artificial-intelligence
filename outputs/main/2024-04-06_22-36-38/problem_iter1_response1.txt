```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate inverse distance
    inv_distance_matrix = 1 / distance_matrix

    # Calculate average distance and maximum distance
    mean_distance = np.mean(distance_matrix)
    max_distance = np.max(distance_matrix)

    # Calculate edge score based on inverse distance, average distance, and maximum distance
    edge_score = inv_distance_matrix * (mean_distance / max_distance)

    # Sparsify the matrix by setting unpromising elements to zero
    threshold = np.mean(edge_score)
    edge_score[edge_score < threshold] = 0

    return edge_score
```
You can use the `heuristics_v2` function to get a matrix of prior indicators on how promising it is to include each edge in a solution. The function first calculates the inverse distance and then combines various factors such as mean distance and maximum distance to determine the edge score. Finally, it sparsifies the matrix by setting unpromising elements to zero based on a threshold derived from the mean edge score.
