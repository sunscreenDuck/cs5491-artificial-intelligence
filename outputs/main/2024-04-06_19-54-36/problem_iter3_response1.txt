```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    distance_mean = np.mean(distance_matrix)  # Calculate the mean distance
    inverse_distances = 1 / distance_matrix  # Calculate the inverse distances
    sum_inverse_distances = inverse_distances + inverse_distances.T  # Sum of inverse distances

    combined_factors = sum_inverse_distances + distance_matrix / distance_mean  # Combine factors
    sparsified_matrix = np.where(combined_factors > np.percentile(combined_factors, 75), combined_factors, 0)  # Sparsify matrix using 75th percentile

    return sparsified_matrix
```
In this code, additional factors and adjustments have been made to improve the heuristics function. The average distance is calculated to normalize the edge importance factor. The sum of inverse distances is used in combination with the distance matrix and the distance mean to create the combined factors. The matrix is then sparsified by setting elements below the 75th percentile to zero.
