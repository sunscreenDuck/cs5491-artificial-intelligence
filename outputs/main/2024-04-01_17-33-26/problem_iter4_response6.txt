```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the average distance for each node
    node_avg_distance = np.sum(distance_matrix, axis=1) / (num_nodes - 1)
    
    # Initialize the penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over the distance matrix
    for i in range(num_nodes):
        for j in range(num_nodes):
            # Compute the penalty value for each edge
            penalty = distance_matrix[i, j] / (node_avg_distance[i] + node_avg_distance[j])
            
            # Set the penalty value in the penalty matrix
            penalty_matrix[i, j] = penalty
    
    return penalty_matrix
```
The improved `heuristics_v2` function simplifies the penalty calculation by removing the term involving the distance range and directly calculates the average distance for each node. This avoids unnecessary calculations and computations.
