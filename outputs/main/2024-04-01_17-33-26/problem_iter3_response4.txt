```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Get the minimum and maximum distance values
    min_distance = np.min(node_distances)
    max_distance = np.max(node_distances)
    
    # Normalize the distances between 0 and 1
    normalized_distances = (node_distances - min_distance) / (max_distance - min_distance)
    
    # Calculate the average distance for each node
    node_avg_distance = node_distances / (num_nodes - 1)
    
    # Initialize the penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over the distance matrix
    for i in range(num_nodes):
        for j in range(num_nodes):
            # Compute the penalty value for each edge
            penalty = distance_matrix[i, j] * normalized_distances[i] * normalized_distances[j]
            
            # Set the penalty value in the penalty matrix
            penalty_matrix[i, j] = penalty
    
    return penalty_matrix
```
