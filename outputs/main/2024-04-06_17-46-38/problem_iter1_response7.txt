```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate the sum of distances for each node
    sum_distances = np.sum(distance_matrix, axis=1) - np.diagonal(distance_matrix)

    # Calculate the average distance for each node
    avg_distances = sum_distances / (num_nodes - 1)

    # Calculate the reciprocal of the average distance
    avg_distances_reciprocal = np.reciprocal(avg_distances)

    # Calculate the sum of reciprocal distances for each node
    sum_reciprocal_distances = np.sum(avg_distances_reciprocal) - np.reciprocal(np.diagonal(distance_matrix))

    # Calculate the prior indicators for each edge
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Combine various factors to determine the promise of selecting an edge
                heuristics_value = (avg_distances_reciprocal[i] + avg_distances_reciprocal[j]) / (distance_matrix[i][j] ** 2)
                # Sparsifying the matrix by setting unpromising elements to zero
                heuristics_matrix[i][j] = heuristics_value / sum_reciprocal_distances if heuristics_value > 0 else 0

    return heuristics_matrix
```

