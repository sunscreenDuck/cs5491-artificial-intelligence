```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.5
    scores = {}
    for node in unvisited_nodes:
        # Calculate the average and standard deviation of distances to unvisited nodes
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate the distance from the current node to the destination node
        distance_to_destination = distance_matrix[current_node][destination_node]
        
        # Calculate the score using a weighted combination of factors
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + c5 * distance_to_destination
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
In the improved code, I added a new factor, `c5 * distance_to_destination`, which considers the distance from the current node to the destination node. The weight `c5` can be adjusted to give more or less importance to this factor. The overall performance of the heuristic can be improved by experimenting with different weights for each factor, for example, by fine-tuning the weights using metaheuristic algorithms like Genetic Algorithms or Particle Swarm Optimization.
