```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """
    Select the next node to visit from the unvisited nodes using improved heuristics.
    
    Args:
        current_node (int): The current node.
        destination_node (int): The destination node.
        unvisited_nodes (set): The set of unvisited nodes.
        distance_matrix (np.ndarray): The distance matrix.
    
    Returns:
        int: The next node to visit.
    """
    # Define the weightings for different factors
    weights = {
        'distance_to_current': 0.4,
        'average_distance_to_unvisited': 0.3,
        'std_dev_distance_to_unvisited': 0.2,
        'distance_to_destination': 0.1
    }
    
    scores = {}
    for node in unvisited_nodes:
        # Calculate the distances from the current node to all other unvisited nodes
        distances_to_unvisited = distance_matrix[current_node][list(unvisited_nodes - {node})]
        
        # Calculate the average and standard deviation of distances to other unvisited nodes
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        
        # Calculate the distance to the destination node as a combination of distances to current and destination nodes
        distance_to_destination = distance_matrix[current_node][node] + distance_matrix[destination_node][node]
        
        # Calculate the score as a combination of different factors with weightings
        score = weights['distance_to_current'] * distance_matrix[current_node][node] \
                - weights['average_distance_to_unvisited'] * average_distance_to_unvisited \
                + weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited \
                - weights['distance_to_destination'] * distance_to_destination
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In this improved version of `select_next_node_v2`, meaningful variable names and comments are used to enhance code readability. The weightings for different factors are defined in a dictionary for easy customization. The calculation of distances, average distance, standard deviation, and score are clearly separated for better understanding.
