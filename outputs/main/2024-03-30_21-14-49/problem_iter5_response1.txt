```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    dist_to_current = distance_matrix[current_node]
    dist_to_destination = distance_matrix[destination_node]
    for node in unvisited_nodes:
        all_distances = dist_to_current[node] + dist_to_current[list(unvisited_nodes)].sum(axis=1) - dist_to_current[node]  # equivalent to np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * dist_to_current[node] - c2 * all_distances.mean() + c3 * std_dev_distance_to_unvisited - c4 * dist_to_destination[node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
In this version, we simplified the code by eliminating the `threshold` variable since it was unused. We also optimized computations by precomputing the distance from the current_node to all other nodes and the distance from the destination_node to all other nodes, instead of recomputing them inside the loop. This way, we avoid redundant calculations.
We simplified the calculation of the average_distance_to_unvisited by directly summing the distances from the current_node to all unvisited_nodes, and then subtracting the distance from the current_node to the current_node itself.
Note: Make sure to import `numpy` before running the code.
