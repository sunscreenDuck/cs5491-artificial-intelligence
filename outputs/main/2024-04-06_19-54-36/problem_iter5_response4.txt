```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)
    
    # Calculate the average distance for each node
    average_distance = np.mean(normalized_matrix, axis=1)
    
    # Calculate the standard deviation of distances for each node
    std_distance = np.std(normalized_matrix, axis=1)
    
    # Calculate the absolute difference between the average distance and the distance for each node
    diff_distance = np.abs(normalized_matrix - average_distance[:, np.newaxis])
    
    # Calculate the maximum distance for each node
    max_distance = np.max(normalized_matrix, axis=1)
    
    # Combine the factors
    combined_factors = diff_distance + std_distance[:, np.newaxis] + max_distance[:, np.newaxis]
    
    # Sparsify the matrix by setting unpromising elements to zero
    sparsified_matrix = np.where(combined_factors < np.mean(combined_factors), combined_factors, 0)
    
    return sparsified_matrix
```
