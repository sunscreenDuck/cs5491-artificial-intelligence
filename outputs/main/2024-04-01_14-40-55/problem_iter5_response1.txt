```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}

    all_distances = distance_matrix[np.ix_(unvisited_nodes, unvisited_nodes)]
    all_distances = np.triu(all_distances) + np.triu(all_distances, 1).T  # Symmetric distance matrix
    
    unvisited_distances = all_distances.sum(axis=1)
    average_distance_to_unvisited = unvisited_distances / (len(unvisited_nodes) - 1)
    std_dev_distance_to_unvisited = np.std(unvisited_distances)

    for node in unvisited_nodes:
        look_aheads = []
        
        next_unvisited_distances = np.append(unvisited_distances, [distance_matrix[node][current_node], distance_matrix[node][destination_node]])
        next_average_distance_to_unvisited = next_unvisited_distances.mean()
        next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances)

        next_scores = (
            c1 * distance_matrix[current_node][node] - 
            c2 * next_average_distance_to_unvisited + 
            c3 * next_std_dev_distance_to_unvisited - 
            c4 * distance_matrix[destination_node][node]
        )
        look_aheads.append(next_scores)

        lookahead_score = np.mean(look_aheads) if look_aheads else 0
        score = (
            c1 * distance_matrix[current_node][node] - 
            c2 * average_distance_to_unvisited[node] + 
            c3 * std_dev_distance_to_unvisited - 
            c4 * distance_matrix[destination_node][node] + 
            threshold * lookahead_score
        )
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In the improved code, we make the following changes:
1. We pre-calculate the distance matrix for unvisited nodes to improve calculations efficiency.
2. We use numpy operations for calculations to improve performance.
3. We eliminate unnecessary nested loops and instead perform calculations using vectors for efficient computations.
4. We use numpy operations to calculate average and standard deviation of distances.
5. We use numpy indexing to construct symmetric distance matrices.
These changes optimize the code by improving performance and readability.
