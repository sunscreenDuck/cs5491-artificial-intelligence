```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate the inverse of the distance matrix
    inv_distance_matrix = 1 / distance_matrix

    # Calculate the sum of the inverse distance for each row and column
    row_sum = np.sum(inv_distance_matrix, axis=1)
    col_sum = np.sum(inv_distance_matrix, axis=0)

    # Calculate the average of the row sum and column sum
    avg_sum = (row_sum + col_sum) / 2

    # Sparsify the matrix by setting unpromising elements to zero
    # Use a threshold of 75th percentile to determine promising elements
    threshold = np.percentile(avg_sum, 75)
    sparse_matrix = np.where(combined_factors > threshold, combined_factors, 0)
    
    return sparse_matrix
```
