```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)

    # Calculate the average distance for each node
    node_avg_distance = node_distances / (distance_matrix.shape[0] - 1)

    # Calculate the weighted average distance for each node
    node_weighted_avg_distance = np.average(distance_matrix, axis=1, weights=node_distances)

    # Calculate the prior indicators for each edge
    edge_indicators = distance_matrix / node_weighted_avg_distance[:, np.newaxis]

    return edge_indicators
```
