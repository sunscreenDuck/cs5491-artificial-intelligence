```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    lookahead = 3  # number of nodes to look ahead
    scores = {}
    for node in unvisited_nodes:
        lookahead_nodes = sorted(unvisited_nodes - {node})[:lookahead]
        lookahead_distances = [distance_matrix[node][i] for i in lookahead_nodes]
        lookahead_avg_distance = np.mean(lookahead_distances)
        
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_avg_distance
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
In `select_next_node_v2` function, I have introduced a lookahead mechanism to consider the distances between the current node and the next few unvisited nodes. This allows the selection of a node that may improve the subsequent path. The number of lookahead nodes can be controlled by the `lookahead` variable. The average distance of these lookahead nodes is then added with a weight (`threshold`) to the calculated score.
