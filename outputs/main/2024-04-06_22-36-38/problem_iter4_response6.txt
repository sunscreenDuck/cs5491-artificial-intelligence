```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    normalized_distance_matrix = distance_matrix / np.max(distance_matrix)
    
    # Calculate the inverse of the normalized distance matrix
    inverse_distance_matrix = 1 / normalized_distance_matrix
    
    # Calculate the mean and standard deviation of the inverse distance matrix
    mean = np.mean(inverse_distance_matrix)
    std_dev = np.std(inverse_distance_matrix)
    
    # Calculate the normalized inverse distance matrix by subtracting the mean and dividing by the standard deviation
    normalized_inverse_distance_matrix = (inverse_distance_matrix - mean) / std_dev
    
    # Calculate the sparsification threshold based on the mean and standard deviation of the normalized inverse distance matrix
    threshold = mean - std_dev
    
    # Apply sparsification by setting unpromising elements to zero
    sparsified_matrix = normalized_inverse_distance_matrix.copy()
    sparsified_matrix[sparsified_matrix < threshold] = 0
    
    return sparsified_matrix
```
The above code is an improved version of the previous code. It normalizes the distance matrix before further calculations and sets the sparsification threshold based on the mean and standard deviation of the normalized inverse distance matrix.
