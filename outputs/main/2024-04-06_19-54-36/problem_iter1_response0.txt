```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((num_nodes, num_nodes))
    
    # Compute initial heuristics
    initial_heuristics = 1 / distance_matrix

    # Scale heuristics based on various factors
    scaled_heuristics = initial_heuristics * (num_nodes - 1)
    
    # Threshold to sparsify the matrix
    threshold = np.percentile(scaled_heuristics, 20)
    
    # Set unpromising elements to zero
    heuristics_matrix[scaled_heuristics < threshold] = 0
    
    return heuristics_matrix
```
Explanation:
- The heuristics_v2 function takes a distance matrix as input and returns an updated heuristics matrix.
- Initially, we calculate the initial heuristics by taking the reciprocal of the distance matrix. This reflects the attractiveness of including each edge based on its distance.
- Next, we scale the initial heuristics by multiplying it with the number of nodes minus 1. This factor gives more weightage to the shorter distances, making them more promising.
- We then determine the threshold by selecting the 20th percentile of the scaled heuristics. This is done to sparsify the matrix by setting unpromising elements to zero.
- Finally, we update the heuristics matrix by setting elements that are below the threshold to zero.
- The resulting heuristics matrix indicates how promising it is to include each edge in the solution, with zero indicating an unpromising edge.
- Note that the code assumes that you have imported the numpy library using `import numpy as np`.
