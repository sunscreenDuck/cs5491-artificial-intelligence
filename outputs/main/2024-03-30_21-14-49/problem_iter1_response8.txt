```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes using look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        # Calculate the scores for each unvisited node
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        
        # Calculate the average and standard deviation of distances to unvisited nodes
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate the score based on various factors
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        # Calculate the look-ahead score based on predicted improvement
        look_ahead_scores = []
        for next_node in unvisited_nodes:
            if next_node != node:
                # Calculate the look-ahead score for each next node
                look_ahead_score = c1 * distance_matrix[node][next_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
                look_ahead_scores.append(look_ahead_score)
        
        # Calculate the average look-ahead score
        average_look_ahead_score = np.mean(look_ahead_scores)
        
        # Calculate the final score by considering both the original score and the look-ahead score
        final_score = (1 - threshold) * score + threshold * average_look_ahead_score
        
        # Store the final score for each unvisited node
        scores[node] = final_score
    
    # Select the next node to visit based on the highest final score
    next_node = max(scores, key=scores.get)
    
    return next_node
```

