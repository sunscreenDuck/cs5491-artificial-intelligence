```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        
        # Calculate the average and standard deviation only once
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate the score using the weighted sum of different factors
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]

        # Look ahead and consider the effect of visiting this node on future node selections
        look_ahead_score = 0
        for future_node in unvisited_nodes:
            if future_node != node:
                look_ahead_score += distance_matrix[node][future_node] - np.mean([distance_matrix[future_node][n] for n in unvisited_nodes if n != future_node])
        total_score = score + threshold * look_ahead_score

        scores[node] = total_score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
