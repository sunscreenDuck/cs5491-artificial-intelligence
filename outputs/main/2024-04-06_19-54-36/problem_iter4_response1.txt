```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix to have values between 0 and 1
    normalized_matrix = (distance_matrix - np.min(distance_matrix)) / (np.max(distance_matrix) - np.min(distance_matrix))
    
    # Calculate the combined factors using the inverse of the distance matrix and its transpose
    combined_factors = 1 / (normalized_matrix + normalized_matrix.T)
    
    # Sparsify the matrix by setting unpromising elements to zero using the median as the threshold
    sparsified_matrix = np.where(combined_factors > np.median(combined_factors), combined_factors, 0)
    
    return sparsified_matrix
```
