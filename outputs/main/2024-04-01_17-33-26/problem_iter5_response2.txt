```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]

    # Normalize the distance matrix
    normalized_distance_matrix = distance_matrix / np.max(distance_matrix)

    # Calculate the sum of distances for each node
    node_distances = np.sum(normalized_distance_matrix, axis=1)

    # Calculate the average distance for each node
    node_avg_distance = node_distances / (num_nodes - 1)

    # Calculate the node degrees
    node_degrees = np.sum(normalized_distance_matrix > 0, axis=1)

    # Calculate the neighborhood information
    neighborhood_info = np.dot(normalized_distance_matrix, normalized_distance_matrix)

    # Calculate the penalty matrix
    penalty_matrix = np.zeros_like(distance_matrix)
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                # Compute the penalty value for each edge
                edge_penalty = (normalized_distance_matrix[i, j] + normalized_distance_matrix[j, i]) / (
                            node_avg_distance[i] + node_avg_distance[j]) + node_degrees[i] + node_degrees[j] + \
                               neighborhood_info[i, j]

                # Set the penalty value in the penalty matrix
                penalty_matrix[i, j] = edge_penalty

    return penalty_matrix
```
```
