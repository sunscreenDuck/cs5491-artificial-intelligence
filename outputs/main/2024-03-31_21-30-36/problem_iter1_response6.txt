```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes using look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Look-ahead mechanism
        num_lookahead = 3
        lookahead_scores = []
        lookahead_nodes = list(unvisited_nodes)
        lookahead_nodes.remove(node)
        for _ in range(num_lookahead):
            lookahead_score = []
            for lookahead_node in lookahead_nodes:
                lookahead_all_distances = [distance_matrix[lookahead_node][i] for i in lookahead_nodes if i != lookahead_node]
                
                # Calculate lookahead score based on lookahead distances
                lookahead_average_distance_to_unvisited = np.mean(lookahead_all_distances)
                lookahead_std_dev_distance_to_unvisited = np.std(lookahead_all_distances)
                lookahead_score.append(c1 * distance_matrix[current_node][node] - c2 * lookahead_average_distance_to_unvisited + c3 * lookahead_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][lookahead_node])
            lookahead_scores.append(max(lookahead_score))
            max_index = lookahead_score.index(max(lookahead_score))
            next_lookahead_node = lookahead_nodes[max_index]
            lookahead_nodes.remove(next_lookahead_node)
        
        # Use the maximum lookahead score as the node score
        score = np.mean(lookahead_scores)
        scores[node] = score
    
    # Select the node with the minimum score as the next node to visit
    next_node = min(scores, key=scores.get)
    return next_node
```

