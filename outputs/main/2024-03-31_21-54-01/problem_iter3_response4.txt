```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2 = 0.4, 0.3
    scores = {}
    
    # Compute average and standard deviation of distances
    all_distances = distance_matrix[current_node][np.array(list(unvisited_nodes))]
    average_distance_to_unvisited = np.mean(all_distances)
    std_dev_distance_to_unvisited = np.std(all_distances)
    
    for node in unvisited_nodes:
        score = c1 * distance_matrix[current_node, node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node, node]
        scores[node] = score
        
    next_node = min(scores, key=scores.get)
    return next_node
```
I simplified the scoring function by removing unnecessary terms and pre-computed the average and standard deviation of distances outside of the loop to optimize computation.
