```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with further improved constructive heuristics."""

    # Define weights for scoring
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.6
    threshold = 0.5

    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        num_unvisited_nodes = len(unvisited_node_list)

        # Get distances to unvisited nodes
        unvisited_distances = distance_matrix[node][unvisited_node_list]
        distances_with_current_and_destination = np.concatenate([unvisited_distances,
                                                                  [distance_matrix[node][current_node],
                                                                   distance_matrix[node][destination_node]]])

        # Calculate average and standard deviation of distances to unvisited nodes
        average_distance_to_unvisited = np.mean(distances_with_current_and_destination)
        std_dev_distance_to_unvisited = np.std(distances_with_current_and_destination)

        look_ahead_scores = []
        for next_node in unvisited_node_list:
            # Get distances to unvisited nodes for next node
            next_unvisited_distances = distance_matrix[next_node][unvisited_node_list]
            next_distances_with_current_and_destination = np.concatenate([next_unvisited_distances,
                                                                          [distance_matrix[next_node][current_node],
                                                                           distance_matrix[next_node][destination_node]]])

            # Calculate average and standard deviation of distances to unvisited nodes for next node
            next_average_distance_to_unvisited = np.mean(next_distances_with_current_and_destination)
            next_std_dev_distance_to_unvisited = np.std(next_distances_with_current_and_destination)

            # Calculate score for each potential next node
            next_score = c1 * distance_matrix[current_node][next_node] \
                        - c2 * next_average_distance_to_unvisited \
                        + c3 * next_std_dev_distance_to_unvisited \
                        - c4 * distance_matrix[destination_node][next_node] \
                        + (c5 / num_unvisited_nodes) * np.sum(distances_with_current_and_destination)
            look_ahead_scores.append(next_score)

        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0

        # Calculate final score for current node
        score = c1 * distance_matrix[current_node][node] \
                - c2 * average_distance_to_unvisited \
                + c3 * std_dev_distance_to_unvisited \
                - c4 * distance_matrix[destination_node][node] \
                + threshold * lookahead_score
        scores[node] = score

    # Select node with the minimum score
    next_node = min(scores, key=scores.get)

    return next_node
```
