```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4, c5, c6 = 0.5, 0.3, 0.1, 0.05, 0.02, 0.03
    scores = {}

    avg_distance_to_destination = np.mean(distance_matrix[:, destination_node])
    std_dev_distance_to_destination = np.std(distance_matrix[:, destination_node])

    for node in unvisited_nodes:
        lookahead_scores = [distance_matrix[node][next_node] for next_node in unvisited_nodes if next_node != node]
        lookahead_scores.append(distance_matrix[node][destination_node])
        avg_lookahead_distance = np.mean(lookahead_scores)
        std_dev_lookahead_distance = np.std(lookahead_scores)

        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        score = (
            c1 * distance_matrix[current_node][node]
            - c2 * average_distance_to_unvisited
            + c3 * std_dev_distance_to_unvisited
            - c4 * distance_matrix[destination_node][node]
            + c5 * (avg_lookahead_distance - distance_matrix[destination_node][node]) / std_dev_lookahead_distance
            + c6 * (distance_matrix[current_node][node] / (distance_matrix[current_node][node] + distance_matrix[node][destination_node]))
            - c6 * (distance_matrix[current_node][node] / (distance_matrix[current_node][node] + avg_distance_to_destination))
            + c6 * (distance_matrix[node][destination_node] / (distance_matrix[current_node][node] + avg_distance_to_destination))
        )
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
