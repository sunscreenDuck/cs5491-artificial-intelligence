```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    threshold = 0.7
    weights = [0.4, 0.3, 0.2, 0.1]
    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})

        all_distances = np.concatenate([distance_matrix[node][unvisited_node_list],
                                        [distance_matrix[node][current_node],
                                         distance_matrix[node][destination_node]]])
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        look_ahead_scores = []
        for next_node in unvisited_node_list:
            next_all_distances = np.concatenate([distance_matrix[next_node][unvisited_node_list],
                                                 [distance_matrix[next_node][current_node],
                                                  distance_matrix[next_node][destination_node]]])
            next_average_distance_to_unvisited = np.mean(next_all_distances)
            next_std_dev_distance_to_unvisited = np.std(next_all_distances)

            next_score = sum(w * d for w, d in zip(weights,
                                                   [distance_matrix[current_node][next_node],
                                                    -next_average_distance_to_unvisited,
                                                    next_std_dev_distance_to_unvisited,
                                                    -distance_matrix[destination_node][next_node]]))
            look_ahead_scores.append(next_score)

        lookahead_score = np.mean(look_ahead_scores) if look_ahead_scores else 0
        score = sum(w * d for w, d in zip(weights,
                                          [distance_matrix[current_node][node],
                                           -average_distance_to_unvisited,
                                           std_dev_distance_to_unvisited,
                                           -distance_matrix[destination_node][node]])) + threshold * lookahead_score
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
The code uses NumPy functions and simplifies the calculations for the scores. It also removes redundant code and intermediate variables to improve efficiency and readability. The weights and the threshold are left as parameters for further fine-tuning.
