```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    lookahead_steps = 5  # Number of steps to look ahead
    scores = {}
    
    for node in unvisited_nodes:
        lookahead_nodes = list(unvisited_nodes - {node})[:lookahead_steps]
        lookahead_scores = []
        
        for lookahead_node in lookahead_nodes:
            lookahead_unvisited_nodes = unvisited_nodes - {node, lookahead_node}
            lookahead_distances = [distance_matrix[lookahead_node][i] for i in lookahead_unvisited_nodes]
            lookahead_avg_distance = np.mean(lookahead_distances)
            lookahead_std_dev_distance = np.std(lookahead_distances)
            
            lookahead_score = (
                c1 * distance_matrix[current_node][lookahead_node] 
                - c2 * lookahead_avg_distance 
                + c3 * lookahead_std_dev_distance 
                - c4 * distance_matrix[destination_node][lookahead_node]
            )
            lookahead_scores.append(lookahead_score)
        
        lookahead_score = np.mean(lookahead_scores)
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        avg_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        score = (
            c1 * distance_matrix[current_node][node] 
            - c2 * avg_distance_to_unvisited 
            + c3 * std_dev_distance_to_unvisited 
            - c4 * distance_matrix[destination_node][node]
            + threshold * lookahead_score
        )
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In this updated `select_next_node_v2` function, we have incorporated a limited number of lookahead steps to improve the decision-making process. The function now evaluates the potential of a node as the next node to visit based on both the current node and the lookahead nodes. We calculate the average and standard deviation of distances between lookahead nodes and the remaining unvisited nodes. The average of lookahead scores is then multiplied by a threshold and added to the original score calculation. This allows the function to consider potential future impacts on the path selection.
