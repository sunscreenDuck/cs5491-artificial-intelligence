```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        # Calculate distance metrics for the node
        all_distances = distance_matrix[node, list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate the score
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
This version of `select_next_node_v2` applies the following improvements:
- Calculate the distance metrics using array indexing instead of looping over the unvisited nodes.
- Use the set difference operation (`-`) to exclude the current node from the `all_distances` calculation.
- Use the numpy library for efficient calculation of the mean and standard deviation.
- Refactor the calculation of the score for better readability and simplification.
