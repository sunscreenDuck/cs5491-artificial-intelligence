```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with further improved constructive heuristics."""
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.1
    
    # Calculate average and standard deviation of distances for all unvisited nodes
    all_distances = np.concatenate([distance_matrix[i][unvisited_nodes] for i in unvisited_nodes])
    all_average_distance = np.mean(all_distances)
    all_std_dev_distance = np.std(all_distances)

    scores = {}

    for node in unvisited_nodes:
        # Calculate average and standard deviation of distances for current node
        current_node_distances = np.concatenate([distance_matrix[node][unvisited_nodes - {node}], 
                                                 [distance_matrix[node][current_node], distance_matrix[node][destination_node]]])
        current_average_distance = np.mean(current_node_distances)
        current_std_dev_distance = np.std(current_node_distances)

        # Calculate score
        score = (c1 * distance_matrix[current_node][node] - 
                 c2 * current_average_distance + 
                 c3 * current_std_dev_distance - 
                 c4 * distance_matrix[destination_node][node] + 
                 c5 * (all_average_distance - current_average_distance) - 
                 c5 * (all_std_dev_distance - current_std_dev_distance))
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
