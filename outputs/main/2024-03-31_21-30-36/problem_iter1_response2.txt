```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        look_ahead_score = 0
        for next_node in unvisited_nodes:
            if next_node != node:
                future_distances = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
                future_avg_distance_to_unvisited = np.mean(future_distances)
                future_std_dev_distance_to_unvisited = np.std(future_distances)
                
                future_score = c1 * distance_matrix[node][next_node] - \
                               c2 * future_avg_distance_to_unvisited + \
                               c3 * future_std_dev_distance_to_unvisited - \
                               c4 * distance_matrix[destination_node][next_node]
                
                if future_score > threshold:
                    look_ahead_score += future_score
        
        score = c1 * distance_matrix[current_node][node] - \
                c2 * average_distance_to_unvisited + \
                c3 * std_dev_distance_to_unvisited - \
                c4 * distance_matrix[destination_node][node] + \
                look_ahead_score
                
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In the improved `select_next_node_v2` function, I have added a look-ahead mechanism. This mechanism calculates the score for each unvisited node considering the potential future scores when visiting other unvisited nodes. It sums up the future scores if they are greater than a threshold. This helps in selecting a node that is not only good in the current step but also has the potential to lead to a better overall solution.
