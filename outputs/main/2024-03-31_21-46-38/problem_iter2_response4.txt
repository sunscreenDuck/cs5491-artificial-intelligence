```python
from typing import List
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    lookahead_threshold = 0.7
    scores = {}

    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        next_nodes = unvisited_nodes - set([node])

        if len(next_nodes) >= 2:
            lookahead_scores = []
            for lookahead_node in next_nodes:
                lookahead_scores.append(
                    c1 * distance_matrix[node][lookahead_node]
                    - c2 * average_distance_to_unvisited
                    + c3 * std_dev_distance_to_unvisited
                    - c4 * distance_matrix[destination_node][lookahead_node]
                )
            lookahead_score = np.mean(lookahead_scores)
        else:
            lookahead_score = 0

        score = (
            c1 * distance_matrix[current_node][node]
            - c2 * average_distance_to_unvisited
            + c3 * std_dev_distance_to_unvisited
            - c4 * distance_matrix[destination_node][node]
            + lookahead_threshold * lookahead_score
        )
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
