```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}

    for node in unvisited_nodes:

        # Calculate average and standard deviation of distances for all unvisited nodes excluding the current and destination nodes
        distances_unvisited = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        distances_unvisited.extend([distance_matrix[node][current_node], distance_matrix[node][destination_node]])
        avg_dist_unvisited = np.mean(distances_unvisited)
        std_dev_dist_unvisited = np.std(distances_unvisited)
        
        look_ahead_scores = []
        for next_node in unvisited_nodes:
            if next_node != node:
                distances_next_unvisited = [distance_matrix[next_node][i] for i in unvisited_nodes if i != next_node]
                distances_next_unvisited.extend([distance_matrix[next_node][current_node], distance_matrix[next_node][destination_node]])
                avg_dist_next_unvisited = np.mean(distances_next_unvisited)
                std_dev_dist_next_unvisited = np.std(distances_next_unvisited)

                look_ahead_score = c1 * distance_matrix[current_node][next_node] - c2 * avg_dist_next_unvisited + c3 * std_dev_dist_next_unvisited - c4 * distance_matrix[destination_node][next_node]
                look_ahead_scores.append(look_ahead_score)
        
        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0
        score = c1 * distance_matrix[current_node][node] - c2 * avg_dist_unvisited + c3 * std_dev_dist_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_score
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
