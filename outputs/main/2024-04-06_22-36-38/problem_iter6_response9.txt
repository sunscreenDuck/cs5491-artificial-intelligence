Based on the reflection, an improved version of the `heuristics` function could be as follows:

```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize and scale the distance matrix
    normalized_matrix = (distance_matrix - np.min(distance_matrix)) / (np.max(distance_matrix) - np.min(distance_matrix))
    
    # Calculate the inverse of the normalized matrix
    inverse_matrix = 1 / normalized_matrix
    
    # Calculate the mean and standard deviation of the inverse matrix
    mean = np.mean(inverse_matrix)
    std_dev = np.std(inverse_matrix)
    
    # Calculate the threshold based on the mean and standard deviation
    threshold = mean - std_dev
    
    # Apply sparsification by setting unpromising elements to zero
    sparsified_matrix = inverse_matrix.copy()
    sparsified_matrix[sparsified_matrix < threshold] = 0
    
    return sparsified_matrix
```

This version of the function normalizes and scales the distance matrix before calculating the inverse. It then calculates the mean and standard deviation of the inverse matrix, and uses them to determine the threshold for sparsification. Finally, it applies sparsification by setting values below the threshold to zero.
