```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes, using look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        lookahead_score = 0
        next_node = None
        for n in unvisited_nodes - {node}:
            next_distances = [distance_matrix[n][i] for i in unvisited_nodes if i != n and i != node]
            next_average_distance_to_unvisited = np.mean(next_distances)
            next_std_dev_distance_to_unvisited = np.std(next_distances)

            score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
            lookahead_score += score

            if next_node is None or lookahead_score > scores[next_node]:
                next_node = n

        scores[node] = lookahead_score

    next_node = min(scores, key=scores.get)
    return next_node
```
