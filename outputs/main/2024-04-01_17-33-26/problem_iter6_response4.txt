```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]
    
    # Calculate the average distance for each node
    node_avg_distance = np.mean(distance_matrix, axis=1)
    
    # Initialize the penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over the distance matrix
    for i in range(num_nodes):
        for j in range(num_nodes):
            # Compute the penalty value for each edge
            penalty = distance_matrix[i, j] / (node_avg_distance[i] + node_avg_distance[j])
            
            # Set the penalty value in the penalty matrix
            penalty_matrix[i, j] = penalty
    
    return penalty_matrix
```
In this improved code:
1. The calculation of the sum of distances for each node is removed, as it is not used.
2. The normalized distance calculation is removed, as it is unnecessary.
3. The calculation of node degrees is removed, as it is not used.
4. The calculation of the minimum and maximum distances is removed, as it is not used.
5. The average distance calculation is simplified using `np.mean()`.
6. The calculation of penalty values is simplified.
7. Unnecessary iterations and operations are removed to improve efficiency.
