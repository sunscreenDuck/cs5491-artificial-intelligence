```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Copy the distance matrix
    heuristics = np.copy(distance_matrix)

    # Normalize the distance matrix
    max_distance = np.max(heuristics)
    normalized_matrix = heuristics / max_distance

    # Subtract the minimum value from each row and column
    min_row = np.min(heuristics, axis=1)
    min_col = np.min(heuristics, axis=0)
    heuristics -= min_row[:, np.newaxis]
    heuristics -= min_col
    
    return heuristics
```
Note: I made the suggested improvements based on your prior reflection. The distance matrix is copied using `np.copy()` instead of `.copy()` for better performance. The maximum distance is calculated directly from the `heuristics` matrix to avoid unnecessary computations. I hope this helps!
