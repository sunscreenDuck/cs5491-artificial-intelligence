```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]
    
    # Normalize the distance matrix by dividing each value by the maximum distance value
    normalized_distance_matrix = distance_matrix / np.max(distance_matrix)
    
    # Calculate the sum of distances for each node
    node_distances = np.sum(normalized_distance_matrix, axis=1)
    
    # Initialize the penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over the distance matrix
    for i in range(num_nodes):
        for j in range(num_nodes):
            # Compute the penalty value for each edge
            penalty = normalized_distance_matrix[i, j] / (node_distances[i] + node_distances[j])
            
            # Set the penalty value in the penalty matrix
            penalty_matrix[i, j] = penalty
    
    return penalty_matrix
```
The `heuristics_v2` function applies the following improvements:

1. Normalizes the distance matrix by dividing each distance value by the maximum distance value. This takes into account the actual range of distances and provides a more representative measure of node distances.

2. Calculates the sum of distances for each node instead of the average. This considers the total impact of all edges connected to a node, giving higher priority to nodes with longer total distances.

Please let me know if you need further clarification or if there is anything else I can help you with!
