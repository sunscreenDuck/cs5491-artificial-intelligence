```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with further improved constructive heuristics."""
    
    # Define weights for scoring
    c1, c2, c3, c4, c5 = 0.4, 0.3, 0.2, 0.1, 0.6
    threshold = 0.5
    
    scores = {}
    
    # Calculate average and standard deviation of distances to unvisited nodes
    unvisited_distances = distance_matrix[current_node][list(unvisited_nodes)]
    unvisited_distances = np.append(unvisited_distances, [distance_matrix[current_node][current_node], distance_matrix[current_node][destination_node]])
    average_distance_to_unvisited = np.mean(unvisited_distances)
    std_dev_distance_to_unvisited = np.std(unvisited_distances)
    
    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        
        next_unvisited_distances = distance_matrix[node][unvisited_node_list]
        next_unvisited_distances = np.append(next_unvisited_distances, [distance_matrix[node][current_node], distance_matrix[node][destination_node]])
        next_average_distance_to_unvisited = np.mean(next_unvisited_distances)
        next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances)
        
        lookahead_score = c1 * distance_matrix[current_node][node] - c2 * next_average_distance_to_unvisited + c3 * next_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_score
        scores[node] = score

    # Select node with the minimum score
    next_node = min(scores, key=scores.get)
    
    return next_node
```
