```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        if len(unvisited_nodes) > 1:
            lookahead_node = min(unvisited_nodes - {node}, key=lambda x: distance_matrix[node][x])
            lookahead_score = c1 * distance_matrix[current_node][lookahead_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][lookahead_node]
        else:
            lookahead_score = float('inf')
        
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_score
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
This improved version of the `select_next_node` function includes a look-ahead mechanism to consider the potential future impact of choosing a particular node. It calculates a lookahead score for each unvisited node by selecting the node that results in the shortest distance to the next unvisited node. The lookahead score is then incorporated into the overall score calculation, allowing the algorithm to prioritize nodes that lead to better future paths. Note that a threshold value is added to control the degree of importance given to the lookahead score.
