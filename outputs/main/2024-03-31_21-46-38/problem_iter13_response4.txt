```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    current_distances = distance_matrix[current_node, unvisited_nodes]
    average_distance_to_unvisited = np.mean(current_distances)
    std_dev_distance_to_unvisited = np.std(current_distances)
    
    for node in unvisited_nodes:
        score = c1 * current_distances[node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node, node]
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
The `select_next_node_v2` function computes the current distances from the `current_node` to all `unvisited_nodes` using numpy indexing. The average and standard deviation of the current distances are then calculated. This way, the distances are computed only once, reducing unnecessary calculations.

Note that the `distance_matrix` is assumed to be a numpy array for faster computations.
