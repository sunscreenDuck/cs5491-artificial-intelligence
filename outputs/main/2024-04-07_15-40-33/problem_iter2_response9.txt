```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Normalize the distance matrix
    normalized_distance_matrix = distance_matrix / distance_matrix.max()
    
    # Calculate the average distance
    avg_distance = np.mean(normalized_distance_matrix)
    
    # Initialize the indicators
    indicators = np.zeros_like(normalized_distance_matrix)
    
    # Update the indicators based on the normalized distance matrix
    for i in range(normalized_distance_matrix.shape[0]):
        for j in range(normalized_distance_matrix.shape[1]):
            if normalized_distance_matrix[i, j] > avg_distance:
                # It's bad to include long edges in the solution
                indicators[i, j] = normalized_distance_matrix[i, j]
    
    return indicators
```
