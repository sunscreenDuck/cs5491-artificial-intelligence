```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        lookahead_scores = []
        for lookahead_node in unvisited_nodes:
            if lookahead_node != node:
                future_node = min(unvisited_nodes, key=lambda i: distance_matrix[lookahead_node][i])
                lookahead_score = distance_matrix[lookahead_node][future_node]
                lookahead_scores.append(lookahead_score)

        lookahead_distance = np.mean(lookahead_scores)
        lookahead_std_dev_distance = np.std(lookahead_scores)

        score = (
            c1 * distance_matrix[current_node][node]
            - c2 * average_distance_to_unvisited
            + c3 * std_dev_distance_to_unvisited
            - c4 * distance_matrix[destination_node][node]
            + threshold * (c1 * lookahead_distance - c2 * average_distance_to_unvisited + c3 * lookahead_std_dev_distance - c4 * distance_matrix[destination_node][lookahead_node])
        )
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```

