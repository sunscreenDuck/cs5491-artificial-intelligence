```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weight_distance_to_current = 0.35
    weight_average_distance_to_unvisited = 0.25
    weight_std_dev_distance_to_unvisited = 0.25
    weight_distance_to_destination = 0.15
    
    scores = {}
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        distances_to_unvisited = distance_matrix[node, list(remaining_nodes)]
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        
        score = (
            weight_distance_to_current * distance_matrix[current_node, node]
            - weight_average_distance_to_unvisited * average_distance_to_unvisited
            + weight_std_dev_distance_to_unvisited * std_dev_distance_to_unvisited
            - weight_distance_to_destination * distance_matrix[destination_node, node]
        )
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
