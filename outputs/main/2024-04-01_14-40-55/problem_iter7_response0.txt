```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    threshold = 0.8
    c1, c2, c3, c4 = 0.3, 0.2, 0.3, 0.2
    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        
        all_distances = np.concatenate([distance_matrix[node][[current_node, destination_node]], distance_matrix[node][unvisited_node_list]])
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)

        look_ahead_scores = []
        for next_node in unvisited_node_list:
            next_all_distances = np.concatenate([distance_matrix[next_node][[current_node, destination_node]], distance_matrix[next_node][unvisited_node_list]])
            next_average_distance_to_unvisited = np.mean(next_all_distances)
            next_std_dev_distance_to_unvisited = np.std(next_all_distances)

            next_score = c1 * distance_matrix[current_node][next_node] - c2 * next_average_distance_to_unvisited + c3 * next_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
            look_ahead_scores.append(next_score)

        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_score
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
