```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        total_score = 0
        num_look_ahead_nodes = min(len(unvisited_nodes)-1, 5)
        look_ahead_nodes = sorted(unvisited_nodes - {node})
        for look_ahead_node in look_ahead_nodes[:num_look_ahead_nodes]:
            look_ahead_score = c1 * distance_matrix[current_node][look_ahead_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][look_ahead_node]
            total_score += look_ahead_score
        score = total_score / num_look_ahead_nodes
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In `select_next_node_v2`, I have added a look-ahead mechanism which considers multiple potential next nodes and calculates the average score based on those nodes. The number of look-ahead nodes is set to a minimum between the number of remaining unvisited nodes minus one and five. This limits the computational complexity while still providing some level of lookahead.
