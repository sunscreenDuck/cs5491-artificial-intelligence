```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    num_nodes = distance_matrix.shape[0]
    
    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the average distance for each node
    node_avg_distance = node_distances / (num_nodes - 1)
    
    # Normalize distance matrix based on node characteristics
    normalized_distance_matrix = distance_matrix / (node_avg_distance + np.finfo(float).eps)
    
    # Calculate the range of the normalized distance matrix
    range_matrix = np.ptp(normalized_distance_matrix)
    
    # Calculate the range-based heuristics for each edge
    penalty_matrix = normalized_distance_matrix / (range_matrix + np.finfo(float).eps)
    
    return penalty_matrix
```
