```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    c1, c2, c3, c4 = 0.4, 0.25, 0.25, 0.1
    scores = {}

    min_dist = np.min(distance_matrix)
    max_dist = np.max(distance_matrix)
    normalized_matrix = (distance_matrix - min_dist) / (max_dist - min_dist)

    for node in unvisited_nodes:
        distance_to_node = normalized_matrix[current_node][node]

        unvisited_distances = [normalized_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)

        look_ahead_distance = normalized_matrix[node][destination_node]

        score = c1 * distance_to_node - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * look_ahead_distance

        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
```
