Here is the mutated `select_next_node_v2` function for the Traveling Salesman Problem (TSP) with improved heuristics:

```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    current_distances = distance_matrix[current_node]
    destination_distances = distance_matrix[destination_node]
    
    for node in unvisited_nodes:
        node_distances = distance_matrix[node]
        all_distances = node_distances[list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        score = c1 * current_distances[node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * destination_distances[node]
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```

This mutated version simplifies the calculations by pre-computing the distances for the `current_node` and `destination_node` outside the loop. It also uses set operations to efficiently compute the distances only for the unvisited nodes. This reduces the number of distance calculations and avoids unnecessary iterations.
