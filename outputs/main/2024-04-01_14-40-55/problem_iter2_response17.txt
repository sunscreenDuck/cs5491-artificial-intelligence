```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:

    """Select the next node to visit from the unvisited nodes with look-ahead mechanisms."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    all_distances = [distance_matrix[node][i] for i in unvisited_nodes for node in unvisited_nodes if i != node]
    average_distance_to_unvisited = np.mean(all_distances)
    std_dev_distance_to_unvisited = np.std(all_distances)

    for node in unvisited_nodes:
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        # Look-ahead mechanism
        next_node_scores = []
        for next_node in unvisited_nodes:
            if next_node != node:
                next_score = c1 * distance_matrix[node][next_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
                next_node_scores.append(next_score)
        look_ahead_score = threshold * score + (1-threshold) * (sum(next_node_scores) / len(next_node_scores))
        
        scores[node] = look_ahead_score
        
    next_node = min(scores, key=scores.get)
    return next_node
```
In the improved `select_next_node_v2` function, we calculate the average distance and standard deviation of distances to unvisited nodes outside of the loop, reducing redundancy in computing those values. Additionally, the look-ahead score calculation has been updated for a better trade-off between the current score and the average score of the next possible nodes.
