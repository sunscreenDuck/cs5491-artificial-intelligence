```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    unvisited_without_current = unvisited_nodes - {current_node}
    distances = distance_matrix[current_node][list(unvisited_without_current)]
    average_distance_to_unvisited = np.mean(distances)
    std_dev_distance_to_unvisited = np.std(distances)
    
    for node in unvisited_nodes:
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        
        unvisited_without_node = unvisited_without_current - {node}
        distances = distance_matrix[node][list(unvisited_without_node)]
        min_distance = min(distances) if distances else 0
        lookahead_score = threshold * min_distance
        score += lookahead_score
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
