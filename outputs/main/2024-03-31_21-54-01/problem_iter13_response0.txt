```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Define weights for different factors
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    
    # Normalize distances and use meaningful variable names
    max_distance = np.amax(distance_matrix)
    normalized_distances_to_current = distance_matrix[current_node] / max_distance
    normalized_distances_to_destination = distance_matrix[destination_node] / max_distance
    
    # Calculate average and standard deviation of distances to unvisited nodes
    unvisited_distances = distance_matrix[list(unvisited_nodes)][:, list(unvisited_nodes)]
    average_distance_to_unvisited = np.mean(unvisited_distances, axis=1)
    std_dev_distance_to_unvisited = np.std(unvisited_distances, axis=1)
    
    # Calculate scores for each unvisited node
    scores = c1 * normalized_distances_to_current[list(unvisited_nodes)] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * normalized_distances_to_destination[list(unvisited_nodes)]
    
    # Select the node with the minimum score
    next_node = np.argmin(scores)
    return list(unvisited_nodes)[next_node]
```
