```python
import random
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    # Set the weights for scoring factors
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    
    # Calculate average distance to unvisited nodes
    average_distance_to_unvisited = np.mean(distance_matrix[current_node, list(unvisited_nodes)])
    
    # Calculate standard deviation of distances to unvisited nodes
    std_dev_distance_to_unvisited = np.std(distance_matrix[current_node, list(unvisited_nodes)])
    
    # Calculate distances to destination node
    distances_to_destination = distance_matrix[destination_node, list(unvisited_nodes)]
    
    # Normalize distances to destination node
    normalized_distances_to_destination = distances_to_destination / np.sum(distances_to_destination)
    
    # Calculate scores based on weighted sum of factors
    scores = c1 * distance_matrix[current_node, list(unvisited_nodes)] \
             - c2 * average_distance_to_unvisited \
             + c3 * std_dev_distance_to_unvisited \
             - c4 * normalized_distances_to_destination
    
    # Add random noise to the scores to encourage exploration
    scores = scores + np.random.uniform(low=0, high=0.1, size=len(scores))
    
    # Select the next node to visit based on the highest score
    next_node = list(unvisited_nodes)[np.argmax(scores)]
    
    return next_node
```
