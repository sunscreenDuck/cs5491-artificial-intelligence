```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = {'distance_to_node': 0.6, 'average_distance_to_unvisited': -0.2, 'std_dev_distance_to_unvisited': -0.1, 'distance_to_destination': -0.3}
    scores = {}
    
    for node in unvisited_nodes:
        distances_to_unvisited = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[destination_node][node]
        
        score = (weights['distance_to_node'] * distance_to_node +
                 weights['average_distance_to_unvisited'] * average_distance_to_unvisited +
                 weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited +
                 weights['distance_to_destination'] * distance_to_destination)
        
        scores[node] = score
    
    next_node = max(scores, key=scores.get)
    return next_node
```
