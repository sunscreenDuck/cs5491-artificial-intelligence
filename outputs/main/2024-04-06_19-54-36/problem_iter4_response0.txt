```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Factor 1: Inverse of distance
    inv_distance = 1 / distance_matrix
    
    # Factor 2: Inverse of degree
    degrees = np.count_nonzero(distance_matrix, axis=1)
    degrees[degrees == 0] = 1  # Avoid division by zero
    inv_degree = 1 / degrees[:, np.newaxis]
    
    # Factor 3: Promising connections
    connected = np.sum(distance_matrix > 0, axis=0)
    promising_connections = connected / (n - 1)
    
    # Factor 4: Symmetry
    symmetrical = np.minimum(inv_distance, inv_distance.T)
    
    # Combine factors
    combined_factors = inv_distance + inv_degree + promising_connections * 2 + symmetrical
    
    # Sparsify the matrix
    mean_factor = np.mean(combined_factors)
    sparsified_matrix = np.where(combined_factors > mean_factor, combined_factors, 0)

    return sparsified_matrix
```
