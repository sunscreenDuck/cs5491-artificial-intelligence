```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the inverse of the distance matrix
    inv_distance_matrix = 1 / distance_matrix
    
    # Calculate the sum of the inverse distance for each row
    row_sum = np.sum(inv_distance_matrix, axis=1)
    
    # Calculate the sum of the inverse distance for each column
    col_sum = np.sum(inv_distance_matrix, axis=0)
    
    # Calculate the average of the row sum and column sum
    avg_sum = (row_sum + col_sum) / 2
    
    # Calculate the combined factors for each element
    combined_factors = inv_distance_matrix * avg_sum
    
    # Sparsify the matrix by setting unpromising elements to zero
    sparse_matrix = np.where(combined_factors > np.mean(avg_sum), combined_factors, 0)
    
    return sparse_matrix
```

