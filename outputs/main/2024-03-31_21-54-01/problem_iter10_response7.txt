```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = [0.4, 0.3, 0.2, 0.1]
    scores = {}
    
    max_distance = np.max(distance_matrix)
    distances = distance_matrix[list(unvisited_nodes), list(unvisited_nodes)]
    average_distances = np.mean(distances, axis=1) / max_distance
    std_dev_distances = np.std(distances, axis=1) / max_distance
    normalized_distances_to_current = distance_matrix[current_node][list(unvisited_nodes)] / max_distance
    normalized_distances_to_destination = distance_matrix[destination_node][list(unvisited_nodes)] / max_distance
    for i, node in enumerate(unvisited_nodes):
        score = sum(weight * value for weight, value in zip(weights, [normalized_distances_to_current[i], -average_distances[i], std_dev_distances[i], -normalized_distances_to_destination[i]]))
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
