```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    
    # Calculate the inverse of distance matrix
    inverse_distance_matrix = 1 / distance_matrix
    
    # Calculate the max and min values of the inverse distance matrix
    max_value = np.max(inverse_distance_matrix)
    min_value = np.min(inverse_distance_matrix)
    
    # Normalize the inverse distance matrix between 0 and 1
    normalized_inverse_distance_matrix = (inverse_distance_matrix - min_value) / (max_value - min_value)
    
    # Apply a threshold to sparsify the matrix
    threshold = np.mean(normalized_inverse_distance_matrix)
    sparsified_matrix = np.where(normalized_inverse_distance_matrix >= threshold, normalized_inverse_distance_matrix, 0)
    
    return sparsified_matrix
```
