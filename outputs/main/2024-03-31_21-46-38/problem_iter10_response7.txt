```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    distances_from_current = distance_matrix[current_node][list(unvisited_nodes)]
    average_distance_to_unvisited = np.mean(distances_from_current)
    std_dev_distance_to_unvisited = np.std(distances_from_current)
    
    for node in unvisited_nodes:
        distance_to_destination = distance_matrix[destination_node][node]
        score = c1 * distances_from_current[node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_to_destination
        scores[node] = score
        
    next_node = min(scores, key=scores.get) if np.random.random() < threshold else np.random.choice(list(unvisited_nodes - {current_node}))
    return next_node
```
