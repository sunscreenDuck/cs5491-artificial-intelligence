```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weight_current_distance = 0.4
    weight_average_distance = 0.3
    weight_standard_deviation = 0.2
    weight_destination_distance = 0.1
    lookahead_threshold = 0.7
    
    scores = {}
    
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[destination_node][node]
        
        distances = distance_matrix[node][list(unvisited_nodes - {node})]
        average_distance = np.mean(distances)
        standard_deviation = np.std(distances)
        
        lookahead_distances = np.concatenate((distances, [destination_distance]))
        average_lookahead_distance = np.mean(lookahead_distances)
        standard_deviation_lookahead = np.std(lookahead_distances)
        
        score = (
            weight_current_distance * current_distance
            - weight_average_distance * average_distance
            + weight_standard_deviation * standard_deviation
            - weight_destination_distance * destination_distance
            + lookahead_threshold * (
                weight_current_distance * average_lookahead_distance
                - weight_average_distance * average_distance
                + weight_standard_deviation * standard_deviation_lookahead
                - weight_destination_distance * destination_distance
            )
        )
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
