```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""

    threshold = 0.5
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1

    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
        
        unvisited_distances = distance_matrix[node][unvisited_node_list]
        unvisited_distances = np.append(unvisited_distances, [distance_matrix[node][current_node], distance_matrix[node][destination_node]])
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)

        next_unvisited_distances = distance_matrix[unvisited_node_list][:, unvisited_node_list]
        next_unvisited_distances = np.append(next_unvisited_distances, [distance_matrix[unvisited_node_list][:, current_node], distance_matrix[unvisited_node_list][:, destination_node]], axis=1)
        next_average_distance_to_unvisited = np.mean(next_unvisited_distances, axis=1)
        next_std_dev_distance_to_unvisited = np.std(next_unvisited_distances, axis=1)

        look_ahead_scores = c1 * distance_matrix[current_node][unvisited_node_list] - c2 * next_average_distance_to_unvisited + c3 * next_std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][unvisited_node_list]
        lookahead_score = np.mean(look_ahead_scores) if len(look_ahead_scores) > 0 else 0

        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * lookahead_score
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
In this code, I have incorporated the following improvements:
- Utilizing vectorized operations to compute the average and standard deviation of distances to unvisited nodes for each node efficiently.
- Using vectorized operations to compute the distances from each unvisited node to all other unvisited nodes, as well as to the current and destination nodes.
- Calculating the lookahead scores in a more compact way using vectorized operations.
- Removed unnecessary variable assignments to improve code readability and performance.
- Changed variable names to be more descriptive.
- Utilized numpy's array slicing and indexing capabilities for efficient computation.

Please note that this code assumes that the distance_matrix is a numpy array and that the elements of the distance_matrix are symmetric (i.e., distance_matrix[i][j] is equal to distance_matrix[j][i]). If the distance_matrix is not symmetric, you may need to modify the code accordingly.
