Here is an improved version of the `heuristics_v1` function, called `heuristics_v2`. This version penalizes the inclusion of long edges in the solution while also taking into account the relevance of each edge by comparing it with the average distance:

```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Calculate the average distance
    avg_distance = np.mean(distance_matrix)
    
    # Initialize the penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over the distance matrix
    for i in range(distance_matrix.shape[0]):
        for j in range(distance_matrix.shape[1]):
            # Compute the penalty value for each edge
            penalty = distance_matrix[i, j] - avg_distance
            
            # Set the penalty value in the penalty matrix
            penalty_matrix[i, j] = penalty
    
    return penalty_matrix
```

This improvement takes into account the average distance in the distance matrix and penalizes the inclusion of edges that are longer than average. The penalty matrix returned also has the same shape as the input distance matrix.

Please note that you need to have the `numpy` library imported for this code to work.
