```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = {
        'choice_score': 0.4,
        'average_distance_score': 0.3,
        'std_dev_distance_score': 0.2,
        'exploitation_score': 0.1
    }
    
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        choice_score = distance_matrix[current_node][node]
        average_distance_score = -average_distance_to_unvisited
        std_dev_distance_score = std_dev_distance_to_unvisited
        exploitation_score = -distance_matrix[destination_node][node]
        
        score = (
            weights['choice_score'] * choice_score +
            weights['average_distance_score'] * average_distance_score +
            weights['std_dev_distance_score'] * std_dev_distance_score +
            weights['exploitation_score'] * exploitation_score
        )
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
