```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Compute the inverse of the distance matrix
    inverse_matrix = 1 / distance_matrix
    
    # Normalize the inverse matrix to have values between 0 and 1
    normalized_matrix = (inverse_matrix - np.min(inverse_matrix)) / (np.max(inverse_matrix) - np.min(inverse_matrix))
    
    # Combine various factors to determine the edge's promise
    factors = [
        normalized_matrix,
        np.exp(-1 / distance_matrix),
        np.sqrt(inverse_matrix),
    ]
    combined_matrix = np.prod(factors, axis=0)
    
    # Sparsify the matrix by setting unpromising elements to zero
    threshold = np.quantile(combined_matrix, 0.5)
    sparsified_matrix = np.where(combined_matrix >= threshold, combined_matrix, 0)
    
    return sparsified_matrix
```
This version of the `heuristics_v2` function combines various factors (such as normalized distance, exponential decay, and square root) to determine the promise of selecting an edge. The factors are multiplied together to calculate a combined promise. The promise values are then sparsified by setting unpromising elements to zero, using a threshold derived from the 0.5 quantile of the combined promise matrix.
