```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""

    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1

    scores = np.zeros(len(unvisited_nodes))
    for i, node in enumerate(unvisited_nodes):
        distance_to_node = distance_matrix[current_node][node]
        average_distance_to_unvisited = np.mean(distance_matrix[node, list(unvisited_nodes - {node})])
        std_dev_distance_to_unvisited = np.std(distance_matrix[node, list(unvisited_nodes - {node})])
        distance_to_destination = distance_matrix[destination_node][node]
        
        score = c1 * distance_to_node - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_to_destination
        scores[i] = score
    
    next_node = unvisited_nodes[np.argmax(scores)]
    return next_node
```
The improved `select_next_node_v2` function uses vectorized operations to calculate the average distance and standard deviation, which can lead to improved performance. The random noise addition has been removed to ensure determinism. The next node is selected based on the highest score using the `np.argmax` function instead of `min`.
