```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.35, 0.3, 0.2, 0.15
    scores = {}

    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        # Calculate lookahead information
        lookahead_distances = [distance_matrix[destination_node][i] for i in unvisited_nodes if i != node]
        lookahead_average_distance = np.mean(lookahead_distances)
        lookahead_std_dev_distance = np.std(lookahead_distances)
        
        # Calculate the score
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * lookahead_average_distance
        
        # Update the score with lookahead information
        lookahead_score = c1 * distance_matrix[current_node][destination_node] - c2 * lookahead_average_distance + c3 * lookahead_std_dev_distance
        score += threshold * lookahead_score
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
