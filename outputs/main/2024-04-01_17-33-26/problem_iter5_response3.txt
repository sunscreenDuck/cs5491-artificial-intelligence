```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    num_nodes = distance_matrix.shape[0]
    
    # Calculate the sum of distances for each node
    node_distances = np.sum(distance_matrix, axis=1)
    
    # Calculate the average distance for each node
    node_avg_distance = node_distances / (num_nodes - 1)
    
    # Calculate the neighborhood sizes for each node
    neighborhood_sizes = np.sum(distance_matrix > 0, axis=1)
    
    # Calculate the weighted average distance for each node
    node_weighted_avg_distance = np.divide(node_distances, neighborhood_sizes, out=np.zeros_like(node_distances), where=neighborhood_sizes!=0)
    
    # Initialize the penalty matrix with zeros
    penalty_matrix = np.zeros_like(distance_matrix)
    
    # Iterate over the distance matrix
    for i in range(num_nodes):
        for j in range(num_nodes):
            # Compute the penalty value for each edge
            penalty = distance_matrix[i, j] / (node_weighted_avg_distance[i] + node_weighted_avg_distance[j] + 1e-9)
            
            # Set the penalty value in the penalty matrix
            penalty_matrix[i, j] = penalty
    
    return penalty_matrix
```
In the improved `heuristics_v2` function:

1. We calculate the neighborhood sizes for each node by counting the number of non-zero entries in each row of the distance matrix.
2. We calculate the weighted average distance for each node by dividing the sum of distances by the neighborhood size. We handle division by zero by setting the value to zero where the neighborhood size is zero.
3. We add a small epsilon value (1e-9) to the denominator when calculating the penalty to avoid division by zero errors.
4. We use numpy vectorized operations to calculate the neighborhood sizes and the weighted average distances for all nodes, which improves computation efficiency.
