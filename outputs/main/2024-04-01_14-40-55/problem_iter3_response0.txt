```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    all_distances = distance_matrix[current_node][list(unvisited_nodes)]
    average_distance_to_unvisited = np.mean(all_distances)
    std_dev_distance_to_unvisited = np.std(all_distances)
    
    for node in unvisited_nodes:
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node]
        scores[node] = score
        
    next_node = min(scores, key=scores.get)
    return next_node
```
In this mutated function `select_next_node_v2`, I have incorporated the following improvements:

1. Calculated `all_distances` outside the loop: The distances from the current node to all unvisited nodes are calculated only once, outside the loop. This avoids unnecessary calculations for each iteration.

2. Calculated `average_distance_to_unvisited` and `std_dev_distance_to_unvisited` outside the loop: The average distance and standard deviation of distances to unvisited nodes are calculated only once, outside the loop. This avoids redundant calculations for each iteration.

By making these changes, the mutated function `select_next_node_v2` reduces unnecessary calculations and improves the efficiency of the code.
