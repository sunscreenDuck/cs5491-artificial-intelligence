```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Normalize the distances between 0 and 1
    normalized_distances = (distance_matrix - np.min(distance_matrix)) / (np.max(distance_matrix) - np.min(distance_matrix))

    # Calculate the sum of distances for each node
    node_distances = np.sum(normalized_distances, axis=1)

    # Calculate the average distance for each node
    node_avg_distance = node_distances / (normalized_distances.shape[0] - 1)

    # Calculate the weighted average distance for each node
    node_weighted_avg_distance = np.average(normalized_distances, axis=1, weights=node_distances)

    # Calculate the prior indicators for each edge
    edge_indicators = normalized_distances / node_weighted_avg_distance[:, np.newaxis]

    return edge_indicators
```
