```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    
    current_dist_to_unvisited = distance_matrix[current_node][list(unvisited_nodes)].mean()
    dest_dist_to_unvisited = distance_matrix[destination_node][list(unvisited_nodes)].mean()
    for node in unvisited_nodes:
        current_to_node_dist = distance_matrix[current_node][node]
        dest_to_node_dist = distance_matrix[destination_node][node]
        
        avg_dist_to_unvisited = (current_dist_to_unvisited + dest_dist_to_unvisited - current_to_node_dist - dest_to_node_dist) / (len(unvisited_nodes) - 2)
        std_dev_distance_to_unvisited = np.std(distance_matrix[node][list(unvisited_nodes) - set([node])])
        
        score = c1 * current_to_node_dist - c2 * avg_dist_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * dest_to_node_dist
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
