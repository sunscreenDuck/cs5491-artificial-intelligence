```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        look_ahead_score = 0
        for next_node in unvisited_nodes:
            if next_node != node:
                look_ahead_distance = distance_matrix[node][next_node]
                look_ahead_score += c1 * look_ahead_distance - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
        score = c1 * distance_matrix[current_node][node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][node] + threshold * look_ahead_score
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
In this modified version, I have added a look-ahead mechanism that calculates a score for each unvisited node by considering the potential impact of selecting that node on the overall path. The look-ahead score is calculated by considering the distance to each unvisited node from the current node, the average distance to other unvisited nodes, the standard deviation of distances to other unvisited nodes, and the distance from the destination node to each unvisited node. These scores are then combined with the original scores to prioritize nodes that have better potential for improving the overall path.
