```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes with improved constructive heuristics."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}

    for node in unvisited_nodes:
        unvisited_node_list = list(unvisited_nodes - {node})
    
        all_distances = distance_matrix[node][unvisited_node_list]
        unvisited_distances = np.concatenate([all_distances, [distance_matrix[node][current_node], distance_matrix[node][destination_node]]])
        
        average_distance_to_unvisited = np.mean(unvisited_distances)
        std_dev_distance_to_unvisited = np.std(unvisited_distances)
        
        look_ahead_scores = [
            c1 * distance_matrix[current_node][next_node]
            - c2 * np.mean(
                np.concatenate(
                    [
                        distance_matrix[next_node][unvisited_node_list],
                        [distance_matrix[next_node][current_node], distance_matrix[next_node][destination_node]],
                    ]
                )
            )
            + c3 * np.std(
                np.concatenate(
                    [
                        distance_matrix[next_node][unvisited_node_list],
                        [distance_matrix[next_node][current_node], distance_matrix[next_node][destination_node]],
                    ]
                )
            )
            - c4 * distance_matrix[destination_node][next_node]
            for next_node in unvisited_node_list
        ]

        lookahead_score = np.mean(look_ahead_scores) if look_ahead_scores else 0
        score = (
            c1 * distance_matrix[current_node][node]
            - c2 * average_distance_to_unvisited
            + c3 * std_dev_distance_to_unvisited
            - c4 * distance_matrix[destination_node][node]
            + threshold * lookahead_score
        )
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node
```
