```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = {
        'distance_to_current': 0.4,
        'average_distance_to_unvisited': 0.3,
        'std_dev_distance_to_unvisited': 0.2,
        'distance_to_destination': 0.1
    }
    
    scores = {}
    for node in unvisited_nodes:
        distances_to_current = distance_matrix[current_node, node]
        average_distance_to_unvisited = np.mean(distance_matrix[node, np.array(list(unvisited_nodes - {node}))])
        std_dev_distance_to_unvisited = np.std(distance_matrix[node, np.array(list(unvisited_nodes - {node}))])
        distance_to_destination = distance_matrix[destination_node, node]
        
        score = (
            weights['distance_to_current'] * distances_to_current +
            weights['average_distance_to_unvisited'] * average_distance_to_unvisited -
            weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited -
            weights['distance_to_destination'] * distance_to_destination
        )
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
In the improved code, the weights for different factors are defined in a dictionary for better readability and flexibility. The distances from the current node to the candidate node, average distance to unvisited nodes, standard deviation of distance to unvisited nodes, and distance to the destination are calculated efficiently using numpy operations. The scores are calculated based on the defined weights and features, and the next node to visit is selected based on the minimum score.
