```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Calculate the inverse of the distance matrix
    inverse_matrix = np.divide(1, distance_matrix, out=np.zeros_like(distance_matrix), where=distance_matrix != 0)

    # Calculate the sum of inverses for each row
    row_sums = np.sum(inverse_matrix, axis=1)

    # Calculate the sum of inverses for each column
    column_sums = np.sum(inverse_matrix, axis=0)

    # Calculate combined factors for each edge using vectorized operations
    heuristics = np.divide(inverse_matrix, row_sums[:, np.newaxis]) + np.divide(inverse_matrix, column_sums)

    # Set elements with low values to zero to sparsify the matrix
    threshold = np.median(heuristics)
    sparse_heuristics = np.where(heuristics > threshold, heuristics, 0)

    return sparse_heuristics
```
