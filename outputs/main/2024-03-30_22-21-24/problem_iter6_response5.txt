```python
def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    weights = {'distance_to_current': -0.4, 'average_distance_to_unvisited': 0.3, 'std_dev_distance_to_unvisited': 0.2, 'distance_to_destination': -0.1}
    
    scores = {}
    
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        
        # Calculate average and standard deviation of distances to unvisited nodes
        distances_to_unvisited = distance_matrix[node][list(unvisited_nodes - {node})]
        average_distance_to_unvisited = np.mean(distances_to_unvisited)
        std_dev_distance_to_unvisited = np.std(distances_to_unvisited)
        
        distance_to_destination = distance_matrix[destination_node][node]
        
        # Normalize the distances
        max_distance = np.max(distance_matrix)
        distance_to_current /= max_distance
        average_distance_to_unvisited /= max_distance
        std_dev_distance_to_unvisited /= max_distance
        distance_to_destination /= max_distance
        
        # Calculate the score based on weighted sum of different factors
        score = weights['distance_to_current'] * distance_to_current + \
                weights['average_distance_to_unvisited'] * average_distance_to_unvisited + \
                weights['std_dev_distance_to_unvisited'] * std_dev_distance_to_unvisited + \
                weights['distance_to_destination'] * distance_to_destination
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
