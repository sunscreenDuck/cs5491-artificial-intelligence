```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate statistics of the distance matrix
    avg_distance = np.mean(distance_matrix)
    min_distance = np.min(distance_matrix)
    max_distance = np.max(distance_matrix)

    # Normalize the distance matrix based on the statistics
    norm_distance_matrix = (distance_matrix - min_distance) / (max_distance - min_distance)

    # Apply weighted penalization
    penalization_factor = 2
    weights = np.exp(-penalization_factor * norm_distance_matrix)

    # Apply the weights to the distance matrix
    new_distance_matrix = distance_matrix * weights

    return new_distance_matrix
```
In `heuristics_v2`, I have incorporated several improvements based on the reflection:

1. Calculates the minimum and maximum distances in the distance matrix to better normalize the distances.
2. Normalizes the distance matrix using min-max normalization, which scales the distances to the range [0, 1].
3. Applies weighted penalization using exponential decay to prioritize edge selection based on the normalized distances.
4. Multiplies the original distance matrix by the weights obtained from penalization to update the new distance matrix.

These improvements aim to balance the impact of different distances in the TSP problem by giving higher priority to edges with lower normalized distances and penalizing edges with higher normalized distances.
