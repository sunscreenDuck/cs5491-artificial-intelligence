```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Normalize the distance matrix
    normalized_matrix = distance_matrix / np.max(distance_matrix)

    # Calculate the average distance
    average_distance = np.mean(normalized_matrix[np.nonzero(normalized_matrix)])

    # Calculate the maximum distance
    max_distance = np.max(normalized_matrix)

    for i in range(n):
        for j in range(n):
            # Calculate the heuristics value as a combination of factors
            heuristic_value = (1 / normalized_matrix[i, j]) + \
                              (average_distance / (normalized_matrix[i, j] ** 2)) + \
                              (normalized_matrix[i, j] / max_distance)

            # Set unpromising elements to zero
            if heuristic_value < 0.25:
                heuristic_value = 0

            heuristics[i, j] = heuristic_value

    return heuristics
```
In this implementation (`heuristics_v2`), I have removed the factors related to the statistics of distances, such as the standard deviation and pairwise difference, as they may not provide strong indicators of edge selection. By simplifying the heuristics, the code is more efficient and the factors are less likely to introduce noise without capturing the desired properties of promising edges.
