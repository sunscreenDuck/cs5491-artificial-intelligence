Here is the `select_next_node_v2` function mutated to improve the code based on the prior reflection:

```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = np.array([0.4, 0.3, 0.2, 0.1])
    normalized_distances = normalize(distance_matrix)

    scores = {}
    for node in unvisited_nodes:
        node_distances = normalized_distances[node]
        average_distance_to_unvisited = np.mean(node_distances[list(unvisited_nodes - {node})])
        std_dev_distance_to_unvisited = np.std(node_distances[list(unvisited_nodes - {node})])
        score = np.dot(weights, [
            node_distances[current_node],
            -average_distance_to_unvisited,
            std_dev_distance_to_unvisited,
            -node_distances[destination_node]
        ])
        scores[node] = score

    next_node = min(scores, key=scores.get)
    return next_node

def normalize(distance_matrix):
    max_distance = np.max(distance_matrix)
    return distance_matrix / max_distance
```

Note: This code assumes that the distance_matrix represents the distances between all nodes, where distance_matrix[i][j] represents the distance between node i and node j.
