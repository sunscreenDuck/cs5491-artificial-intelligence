```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    weights = np.array([0.4, 0.3, 0.2, 0.1])
    scores = {}
    
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        all_distances = distance_matrix[node, list(remaining_nodes)]
        
        average_distance_to_unvisited = np.mean(all_distances)
        std_dev_distance_to_unvisited = np.std(all_distances)
        
        score = np.dot(weights, [
            distance_matrix[current_node, node], 
            -average_distance_to_unvisited, 
            std_dev_distance_to_unvisited, 
            -distance_matrix[destination_node, node]
        ])
        
        scores[node] = score
    
    next_node = min(scores, key=scores.get)
    return next_node
```
This code simplifies the calculation of scores by using numpy arrays and dot product for weighted sum calculations. It also directly extracts the remaining nodes by subtracting the current node from the unvisited nodes set, reducing unnecessary iterations.
