```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        all_distances = [distance_matrix[node][i] for i in unvisited_nodes if i != node]
        average_distance_to_unvisited = np.mean(all_distances)
        score = c1 * distance_to_current - c2 * average_distance_to_unvisited
        scores[node] = score

    selected_nodes = list(scores.keys())
    remaining_nodes = set(unvisited_nodes) - set(selected_nodes)
    distance_to_remaining = distance_matrix[list(remaining_nodes)].min(axis=1)
    look_ahead_scores = {}
    for node in remaining_nodes:
        distance_to_destination = distance_matrix[node][destination_node]
        look_ahead_score = score - c3 * distance_to_remaining[node] - c4 * distance_to_destination
        look_ahead_scores[node] = look_ahead_score

    final_scores = {node: threshold * scores[node] + (1 - threshold) * look_ahead_scores[node] for node in unvisited_nodes}
    next_node = min(final_scores, key=final_scores.get)
    return next_node
```
