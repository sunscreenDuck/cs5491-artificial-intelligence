```python
import numpy as np

def select_next_node_v2(current_node: int, destination_node: int, unvisited_nodes: set, distance_matrix: np.ndarray) -> int:
    """Select the next node to visit from the unvisited nodes."""
    lookahead = 2
    threshold = 0.7
    c1, c2, c3, c4 = 0.4, 0.3, 0.2, 0.1
    scores = {}
    for node in unvisited_nodes:
        lookahead_nodes = list(unvisited_nodes - {node})
        lookahead_scores = []
        for lookahead_node in lookahead_nodes:
            next_nodes = list(unvisited_nodes - {node, lookahead_node})
            lookahead_score = 0
            for i in range(lookahead):
                next_node_scores = {}
                for next_node in next_nodes:
                    all_distances = [distance_matrix[next_node][j] for j in next_nodes if j != next_node]
                    average_distance_to_unvisited = np.mean(all_distances)
                    std_dev_distance_to_unvisited = np.std(all_distances)
                    score = c1 * distance_matrix[lookahead_node][next_node] - c2 * average_distance_to_unvisited + c3 * std_dev_distance_to_unvisited - c4 * distance_matrix[destination_node][next_node]
                    next_node_scores[next_node] = score
                lookahead_node = min(next_node_scores, key=next_node_scores.get)
                lookahead_score += next_node_scores[lookahead_node]
                next_nodes.remove(lookahead_node)
            lookahead_scores.append(lookahead_score)
        average_lookahead_score = np.mean(lookahead_scores)
        std_dev_lookahead_score = np.std(lookahead_scores)
        score = c1 * distance_matrix[current_node][node] - c2 * average_lookahead_score + c3 * std_dev_lookahead_score - c4 * distance_matrix[destination_node][node]
        scores[node] = score
    next_node = min(scores, key=scores.get)
    return next_node
```
