```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    # Calculate the inverse of the distance matrix
    inv_distance_matrix = 1 / distance_matrix
    
    # Calculate the sum of the inverse distance for each row
    row_sum = np.sum(inv_distance_matrix, axis=1)
    
    # Calculate the sum of the inverse distance for each column
    col_sum = np.sum(inv_distance_matrix, axis=0)
    
    # Calculate the combined factors for each element based on the row and column sums
    combined_factors = inv_distance_matrix * (row_sum[:, np.newaxis] + col_sum)
    
    # Sparsify the matrix by setting unpromising elements to zero
    sparsified_matrix = np.where(combined_factors > np.mean(combined_factors), combined_factors, 0)
    
    return sparsified_matrix
```
